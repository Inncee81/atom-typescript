{"mappings":"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","sources":["./node_modules/commonmark/lib/node.js","./node_modules/mdurl/encode.js","./node_modules/entities/lib/index.js","./node_modules/entities/lib/decode.js","./node_modules/entities/lib/maps/entities.json","./node_modules/entities/lib/maps/legacy.json","./node_modules/entities/lib/maps/xml.json","./node_modules/entities/lib/decode_codepoint.js","./node_modules/entities/lib/maps/decode.json","./node_modules/entities/lib/encode.js","./node_modules/commonmark/lib/common.js","./node_modules/@parcel/scope-hoisting/lib/helpers.js","./node_modules/commonmark/lib/from-code-point.js","./node_modules/string.prototype.repeat/repeat.js","./node_modules/commonmark/lib/inlines.js","./node_modules/commonmark/lib/blocks.js","./node_modules/commonmark/lib/render/renderer.js","./node_modules/commonmark/lib/render/html.js","./node_modules/commonmark/lib/render/xml.js"],"sourcesContent":["\"use strict\";\n\nfunction isContainer(node) {\n    switch (node._type) {\n        case \"document\":\n        case \"block_quote\":\n        case \"list\":\n        case \"item\":\n        case \"paragraph\":\n        case \"heading\":\n        case \"emph\":\n        case \"strong\":\n        case \"link\":\n        case \"image\":\n        case \"custom_inline\":\n        case \"custom_block\":\n            return true;\n        default:\n            return false;\n    }\n}\n\nvar resumeAt = function(node, entering) {\n    this.current = node;\n    this.entering = entering === true;\n};\n\nvar next = function() {\n    var cur = this.current;\n    var entering = this.entering;\n\n    if (cur === null) {\n        return null;\n    }\n\n    var container = isContainer(cur);\n\n    if (entering && container) {\n        if (cur._firstChild) {\n            this.current = cur._firstChild;\n            this.entering = true;\n        } else {\n            // stay on node but exit\n            this.entering = false;\n        }\n    } else if (cur === this.root) {\n        this.current = null;\n    } else if (cur._next === null) {\n        this.current = cur._parent;\n        this.entering = false;\n    } else {\n        this.current = cur._next;\n        this.entering = true;\n    }\n\n    return { entering: entering, node: cur };\n};\n\nvar NodeWalker = function(root) {\n    return {\n        current: root,\n        root: root,\n        entering: true,\n        next: next,\n        resumeAt: resumeAt\n    };\n};\n\nvar Node = function(nodeType, sourcepos) {\n    this._type = nodeType;\n    this._parent = null;\n    this._firstChild = null;\n    this._lastChild = null;\n    this._prev = null;\n    this._next = null;\n    this._sourcepos = sourcepos;\n    this._lastLineBlank = false;\n    this._lastLineChecked = false;\n    this._open = true;\n    this._string_content = null;\n    this._literal = null;\n    this._listData = {};\n    this._info = null;\n    this._destination = null;\n    this._title = null;\n    this._isFenced = false;\n    this._fenceChar = null;\n    this._fenceLength = 0;\n    this._fenceOffset = null;\n    this._level = null;\n    this._onEnter = null;\n    this._onExit = null;\n};\n\nvar proto = Node.prototype;\n\nObject.defineProperty(proto, \"isContainer\", {\n    get: function() {\n        return isContainer(this);\n    }\n});\n\nObject.defineProperty(proto, \"type\", {\n    get: function() {\n        return this._type;\n    }\n});\n\nObject.defineProperty(proto, \"firstChild\", {\n    get: function() {\n        return this._firstChild;\n    }\n});\n\nObject.defineProperty(proto, \"lastChild\", {\n    get: function() {\n        return this._lastChild;\n    }\n});\n\nObject.defineProperty(proto, \"next\", {\n    get: function() {\n        return this._next;\n    }\n});\n\nObject.defineProperty(proto, \"prev\", {\n    get: function() {\n        return this._prev;\n    }\n});\n\nObject.defineProperty(proto, \"parent\", {\n    get: function() {\n        return this._parent;\n    }\n});\n\nObject.defineProperty(proto, \"sourcepos\", {\n    get: function() {\n        return this._sourcepos;\n    }\n});\n\nObject.defineProperty(proto, \"literal\", {\n    get: function() {\n        return this._literal;\n    },\n    set: function(s) {\n        this._literal = s;\n    }\n});\n\nObject.defineProperty(proto, \"destination\", {\n    get: function() {\n        return this._destination;\n    },\n    set: function(s) {\n        this._destination = s;\n    }\n});\n\nObject.defineProperty(proto, \"title\", {\n    get: function() {\n        return this._title;\n    },\n    set: function(s) {\n        this._title = s;\n    }\n});\n\nObject.defineProperty(proto, \"info\", {\n    get: function() {\n        return this._info;\n    },\n    set: function(s) {\n        this._info = s;\n    }\n});\n\nObject.defineProperty(proto, \"level\", {\n    get: function() {\n        return this._level;\n    },\n    set: function(s) {\n        this._level = s;\n    }\n});\n\nObject.defineProperty(proto, \"listType\", {\n    get: function() {\n        return this._listData.type;\n    },\n    set: function(t) {\n        this._listData.type = t;\n    }\n});\n\nObject.defineProperty(proto, \"listTight\", {\n    get: function() {\n        return this._listData.tight;\n    },\n    set: function(t) {\n        this._listData.tight = t;\n    }\n});\n\nObject.defineProperty(proto, \"listStart\", {\n    get: function() {\n        return this._listData.start;\n    },\n    set: function(n) {\n        this._listData.start = n;\n    }\n});\n\nObject.defineProperty(proto, \"listDelimiter\", {\n    get: function() {\n        return this._listData.delimiter;\n    },\n    set: function(delim) {\n        this._listData.delimiter = delim;\n    }\n});\n\nObject.defineProperty(proto, \"onEnter\", {\n    get: function() {\n        return this._onEnter;\n    },\n    set: function(s) {\n        this._onEnter = s;\n    }\n});\n\nObject.defineProperty(proto, \"onExit\", {\n    get: function() {\n        return this._onExit;\n    },\n    set: function(s) {\n        this._onExit = s;\n    }\n});\n\nNode.prototype.appendChild = function(child) {\n    child.unlink();\n    child._parent = this;\n    if (this._lastChild) {\n        this._lastChild._next = child;\n        child._prev = this._lastChild;\n        this._lastChild = child;\n    } else {\n        this._firstChild = child;\n        this._lastChild = child;\n    }\n};\n\nNode.prototype.prependChild = function(child) {\n    child.unlink();\n    child._parent = this;\n    if (this._firstChild) {\n        this._firstChild._prev = child;\n        child._next = this._firstChild;\n        this._firstChild = child;\n    } else {\n        this._firstChild = child;\n        this._lastChild = child;\n    }\n};\n\nNode.prototype.unlink = function() {\n    if (this._prev) {\n        this._prev._next = this._next;\n    } else if (this._parent) {\n        this._parent._firstChild = this._next;\n    }\n    if (this._next) {\n        this._next._prev = this._prev;\n    } else if (this._parent) {\n        this._parent._lastChild = this._prev;\n    }\n    this._parent = null;\n    this._next = null;\n    this._prev = null;\n};\n\nNode.prototype.insertAfter = function(sibling) {\n    sibling.unlink();\n    sibling._next = this._next;\n    if (sibling._next) {\n        sibling._next._prev = sibling;\n    }\n    sibling._prev = this;\n    this._next = sibling;\n    sibling._parent = this._parent;\n    if (!sibling._next) {\n        sibling._parent._lastChild = sibling;\n    }\n};\n\nNode.prototype.insertBefore = function(sibling) {\n    sibling.unlink();\n    sibling._prev = this._prev;\n    if (sibling._prev) {\n        sibling._prev._next = sibling;\n    }\n    sibling._next = this;\n    this._prev = sibling;\n    sibling._parent = this._parent;\n    if (!sibling._prev) {\n        sibling._parent._firstChild = sibling;\n    }\n};\n\nNode.prototype.walker = function() {\n    var walker = new NodeWalker(this);\n    return walker;\n};\n\nexport default Node;\n\n/* Example of use of walker:\n\n var walker = w.walker();\n var event;\n\n while (event = walker.next()) {\n console.log(event.entering, event.node.type);\n }\n\n */\n","\n'use strict';\n\n\nvar encodeCache = {};\n\n\n// Create a lookup array where anything but characters in `chars` string\n// and alphanumeric chars is percent-encoded.\n//\nfunction getEncodeCache(exclude) {\n  var i, ch, cache = encodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = encodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n\n    if (/^[0-9a-z]$/i.test(ch)) {\n      // always allow unencoded alphanumeric characters\n      cache.push(ch);\n    } else {\n      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));\n    }\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    cache[exclude.charCodeAt(i)] = exclude[i];\n  }\n\n  return cache;\n}\n\n\n// Encode unsafe characters with percent-encoding, skipping already\n// encoded sequences.\n//\n//  - string       - string to encode\n//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\n//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\n//\nfunction encode(string, exclude, keepEscaped) {\n  var i, l, code, nextCode, cache,\n      result = '';\n\n  if (typeof exclude !== 'string') {\n    // encode(string, keepEscaped)\n    keepEscaped  = exclude;\n    exclude = encode.defaultChars;\n  }\n\n  if (typeof keepEscaped === 'undefined') {\n    keepEscaped = true;\n  }\n\n  cache = getEncodeCache(exclude);\n\n  for (i = 0, l = string.length; i < l; i++) {\n    code = string.charCodeAt(i);\n\n    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {\n      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n        result += string.slice(i, i + 3);\n        i += 2;\n        continue;\n      }\n    }\n\n    if (code < 128) {\n      result += cache[code];\n      continue;\n    }\n\n    if (code >= 0xD800 && code <= 0xDFFF) {\n      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\n        nextCode = string.charCodeAt(i + 1);\n        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n          result += encodeURIComponent(string[i] + string[i + 1]);\n          i++;\n          continue;\n        }\n      }\n      result += '%EF%BF%BD';\n      continue;\n    }\n\n    result += encodeURIComponent(string[i]);\n  }\n\n  return result;\n}\n\nencode.defaultChars   = \";/?:@&=+$,-_.!~*'()#\";\nencode.componentChars = \"-_.!~*'()\";\n\n\nmodule.exports = encode;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encode = exports.decodeStrict = exports.decode = void 0;\nvar decode_1 = require(\"./decode\");\nvar encode_1 = require(\"./encode\");\n/**\n * Decodes a string with entities.\n *\n * @param data String to decode.\n * @param level Optional level to decode at. 0 = XML, 1 = HTML. Default is 0.\n */\nfunction decode(data, level) {\n    return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTML)(data);\n}\nexports.decode = decode;\n/**\n * Decodes a string with entities. Does not allow missing trailing semicolons for entities.\n *\n * @param data String to decode.\n * @param level Optional level to decode at. 0 = XML, 1 = HTML. Default is 0.\n */\nfunction decodeStrict(data, level) {\n    return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTMLStrict)(data);\n}\nexports.decodeStrict = decodeStrict;\n/**\n * Encodes a string with entities.\n *\n * @param data String to encode.\n * @param level Optional level to encode at. 0 = XML, 1 = HTML. Default is 0.\n */\nfunction encode(data, level) {\n    return (!level || level <= 0 ? encode_1.encodeXML : encode_1.encodeHTML)(data);\n}\nexports.encode = encode;\nvar encode_2 = require(\"./encode\");\nObject.defineProperty(exports, \"encodeXML\", { enumerable: true, get: function () { return encode_2.encodeXML; } });\nObject.defineProperty(exports, \"encodeHTML\", { enumerable: true, get: function () { return encode_2.encodeHTML; } });\nObject.defineProperty(exports, \"escape\", { enumerable: true, get: function () { return encode_2.escape; } });\n// Legacy aliases\nObject.defineProperty(exports, \"encodeHTML4\", { enumerable: true, get: function () { return encode_2.encodeHTML; } });\nObject.defineProperty(exports, \"encodeHTML5\", { enumerable: true, get: function () { return encode_2.encodeHTML; } });\nvar decode_2 = require(\"./decode\");\nObject.defineProperty(exports, \"decodeXML\", { enumerable: true, get: function () { return decode_2.decodeXML; } });\nObject.defineProperty(exports, \"decodeHTML\", { enumerable: true, get: function () { return decode_2.decodeHTML; } });\nObject.defineProperty(exports, \"decodeHTMLStrict\", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });\n// Legacy aliases\nObject.defineProperty(exports, \"decodeHTML4\", { enumerable: true, get: function () { return decode_2.decodeHTML; } });\nObject.defineProperty(exports, \"decodeHTML5\", { enumerable: true, get: function () { return decode_2.decodeHTML; } });\nObject.defineProperty(exports, \"decodeHTML4Strict\", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });\nObject.defineProperty(exports, \"decodeHTML5Strict\", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });\nObject.defineProperty(exports, \"decodeXMLStrict\", { enumerable: true, get: function () { return decode_2.decodeXML; } });\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeHTML = exports.decodeHTMLStrict = exports.decodeXML = void 0;\nvar entities_json_1 = __importDefault(require(\"./maps/entities.json\"));\nvar legacy_json_1 = __importDefault(require(\"./maps/legacy.json\"));\nvar xml_json_1 = __importDefault(require(\"./maps/xml.json\"));\nvar decode_codepoint_1 = __importDefault(require(\"./decode_codepoint\"));\nexports.decodeXML = getStrictDecoder(xml_json_1.default);\nexports.decodeHTMLStrict = getStrictDecoder(entities_json_1.default);\nfunction getStrictDecoder(map) {\n    var keys = Object.keys(map).join(\"|\");\n    var replace = getReplacer(map);\n    keys += \"|#[xX][\\\\da-fA-F]+|#\\\\d+\";\n    var re = new RegExp(\"&(?:\" + keys + \");\", \"g\");\n    return function (str) { return String(str).replace(re, replace); };\n}\nvar sorter = function (a, b) { return (a < b ? 1 : -1); };\nexports.decodeHTML = (function () {\n    var legacy = Object.keys(legacy_json_1.default).sort(sorter);\n    var keys = Object.keys(entities_json_1.default).sort(sorter);\n    for (var i = 0, j = 0; i < keys.length; i++) {\n        if (legacy[j] === keys[i]) {\n            keys[i] += \";?\";\n            j++;\n        }\n        else {\n            keys[i] += \";\";\n        }\n    }\n    var re = new RegExp(\"&(?:\" + keys.join(\"|\") + \"|#[xX][\\\\da-fA-F]+;?|#\\\\d+;?)\", \"g\");\n    var replace = getReplacer(entities_json_1.default);\n    function replacer(str) {\n        if (str.substr(-1) !== \";\")\n            str += \";\";\n        return replace(str);\n    }\n    //TODO consider creating a merged map\n    return function (str) { return String(str).replace(re, replacer); };\n})();\nfunction getReplacer(map) {\n    return function replace(str) {\n        if (str.charAt(1) === \"#\") {\n            var secondChar = str.charAt(2);\n            if (secondChar === \"X\" || secondChar === \"x\") {\n                return decode_codepoint_1.default(parseInt(str.substr(3), 16));\n            }\n            return decode_codepoint_1.default(parseInt(str.substr(2), 10));\n        }\n        return map[str.slice(1, -1)];\n    };\n}\n","{ \"Aacute\": \"\\u00C1\", \"aacute\": \"\\u00E1\", \"Abreve\": \"\\u0102\", \"abreve\": \"\\u0103\", \"ac\": \"\\u223E\", \"acd\": \"\\u223F\", \"acE\": \"\\u223E\\u0333\", \"Acirc\": \"\\u00C2\", \"acirc\": \"\\u00E2\", \"acute\": \"\\u00B4\", \"Acy\": \"\\u0410\", \"acy\": \"\\u0430\", \"AElig\": \"\\u00C6\", \"aelig\": \"\\u00E6\", \"af\": \"\\u2061\", \"Afr\": \"\\uD835\\uDD04\", \"afr\": \"\\uD835\\uDD1E\", \"Agrave\": \"\\u00C0\", \"agrave\": \"\\u00E0\", \"alefsym\": \"\\u2135\", \"aleph\": \"\\u2135\", \"Alpha\": \"\\u0391\", \"alpha\": \"\\u03B1\", \"Amacr\": \"\\u0100\", \"amacr\": \"\\u0101\", \"amalg\": \"\\u2A3F\", \"amp\": \"&\", \"AMP\": \"&\", \"andand\": \"\\u2A55\", \"And\": \"\\u2A53\", \"and\": \"\\u2227\", \"andd\": \"\\u2A5C\", \"andslope\": \"\\u2A58\", \"andv\": \"\\u2A5A\", \"ang\": \"\\u2220\", \"ange\": \"\\u29A4\", \"angle\": \"\\u2220\", \"angmsdaa\": \"\\u29A8\", \"angmsdab\": \"\\u29A9\", \"angmsdac\": \"\\u29AA\", \"angmsdad\": \"\\u29AB\", \"angmsdae\": \"\\u29AC\", \"angmsdaf\": \"\\u29AD\", \"angmsdag\": \"\\u29AE\", \"angmsdah\": \"\\u29AF\", \"angmsd\": \"\\u2221\", \"angrt\": \"\\u221F\", \"angrtvb\": \"\\u22BE\", \"angrtvbd\": \"\\u299D\", \"angsph\": \"\\u2222\", \"angst\": \"\\u00C5\", \"angzarr\": \"\\u237C\", \"Aogon\": \"\\u0104\", \"aogon\": \"\\u0105\", \"Aopf\": \"\\uD835\\uDD38\", \"aopf\": \"\\uD835\\uDD52\", \"apacir\": \"\\u2A6F\", \"ap\": \"\\u2248\", \"apE\": \"\\u2A70\", \"ape\": \"\\u224A\", \"apid\": \"\\u224B\", \"apos\": \"'\", \"ApplyFunction\": \"\\u2061\", \"approx\": \"\\u2248\", \"approxeq\": \"\\u224A\", \"Aring\": \"\\u00C5\", \"aring\": \"\\u00E5\", \"Ascr\": \"\\uD835\\uDC9C\", \"ascr\": \"\\uD835\\uDCB6\", \"Assign\": \"\\u2254\", \"ast\": \"*\", \"asymp\": \"\\u2248\", \"asympeq\": \"\\u224D\", \"Atilde\": \"\\u00C3\", \"atilde\": \"\\u00E3\", \"Auml\": \"\\u00C4\", \"auml\": \"\\u00E4\", \"awconint\": \"\\u2233\", \"awint\": \"\\u2A11\", \"backcong\": \"\\u224C\", \"backepsilon\": \"\\u03F6\", \"backprime\": \"\\u2035\", \"backsim\": \"\\u223D\", \"backsimeq\": \"\\u22CD\", \"Backslash\": \"\\u2216\", \"Barv\": \"\\u2AE7\", \"barvee\": \"\\u22BD\", \"barwed\": \"\\u2305\", \"Barwed\": \"\\u2306\", \"barwedge\": \"\\u2305\", \"bbrk\": \"\\u23B5\", \"bbrktbrk\": \"\\u23B6\", \"bcong\": \"\\u224C\", \"Bcy\": \"\\u0411\", \"bcy\": \"\\u0431\", \"bdquo\": \"\\u201E\", \"becaus\": \"\\u2235\", \"because\": \"\\u2235\", \"Because\": \"\\u2235\", \"bemptyv\": \"\\u29B0\", \"bepsi\": \"\\u03F6\", \"bernou\": \"\\u212C\", \"Bernoullis\": \"\\u212C\", \"Beta\": \"\\u0392\", \"beta\": \"\\u03B2\", \"beth\": \"\\u2136\", \"between\": \"\\u226C\", \"Bfr\": \"\\uD835\\uDD05\", \"bfr\": \"\\uD835\\uDD1F\", \"bigcap\": \"\\u22C2\", \"bigcirc\": \"\\u25EF\", \"bigcup\": \"\\u22C3\", \"bigodot\": \"\\u2A00\", \"bigoplus\": \"\\u2A01\", \"bigotimes\": \"\\u2A02\", \"bigsqcup\": \"\\u2A06\", \"bigstar\": \"\\u2605\", \"bigtriangledown\": \"\\u25BD\", \"bigtriangleup\": \"\\u25B3\", \"biguplus\": \"\\u2A04\", \"bigvee\": \"\\u22C1\", \"bigwedge\": \"\\u22C0\", \"bkarow\": \"\\u290D\", \"blacklozenge\": \"\\u29EB\", \"blacksquare\": \"\\u25AA\", \"blacktriangle\": \"\\u25B4\", \"blacktriangledown\": \"\\u25BE\", \"blacktriangleleft\": \"\\u25C2\", \"blacktriangleright\": \"\\u25B8\", \"blank\": \"\\u2423\", \"blk12\": \"\\u2592\", \"blk14\": \"\\u2591\", \"blk34\": \"\\u2593\", \"block\": \"\\u2588\", \"bne\": \"=\\u20E5\", \"bnequiv\": \"\\u2261\\u20E5\", \"bNot\": \"\\u2AED\", \"bnot\": \"\\u2310\", \"Bopf\": \"\\uD835\\uDD39\", \"bopf\": \"\\uD835\\uDD53\", \"bot\": \"\\u22A5\", \"bottom\": \"\\u22A5\", \"bowtie\": \"\\u22C8\", \"boxbox\": \"\\u29C9\", \"boxdl\": \"\\u2510\", \"boxdL\": \"\\u2555\", \"boxDl\": \"\\u2556\", \"boxDL\": \"\\u2557\", \"boxdr\": \"\\u250C\", \"boxdR\": \"\\u2552\", \"boxDr\": \"\\u2553\", \"boxDR\": \"\\u2554\", \"boxh\": \"\\u2500\", \"boxH\": \"\\u2550\", \"boxhd\": \"\\u252C\", \"boxHd\": \"\\u2564\", \"boxhD\": \"\\u2565\", \"boxHD\": \"\\u2566\", \"boxhu\": \"\\u2534\", \"boxHu\": \"\\u2567\", \"boxhU\": \"\\u2568\", \"boxHU\": \"\\u2569\", \"boxminus\": \"\\u229F\", \"boxplus\": \"\\u229E\", \"boxtimes\": \"\\u22A0\", \"boxul\": \"\\u2518\", \"boxuL\": \"\\u255B\", \"boxUl\": \"\\u255C\", \"boxUL\": \"\\u255D\", \"boxur\": \"\\u2514\", \"boxuR\": \"\\u2558\", \"boxUr\": \"\\u2559\", \"boxUR\": \"\\u255A\", \"boxv\": \"\\u2502\", \"boxV\": \"\\u2551\", \"boxvh\": \"\\u253C\", \"boxvH\": \"\\u256A\", \"boxVh\": \"\\u256B\", \"boxVH\": \"\\u256C\", \"boxvl\": \"\\u2524\", \"boxvL\": \"\\u2561\", \"boxVl\": \"\\u2562\", \"boxVL\": \"\\u2563\", \"boxvr\": \"\\u251C\", \"boxvR\": \"\\u255E\", \"boxVr\": \"\\u255F\", \"boxVR\": \"\\u2560\", \"bprime\": \"\\u2035\", \"breve\": \"\\u02D8\", \"Breve\": \"\\u02D8\", \"brvbar\": \"\\u00A6\", \"bscr\": \"\\uD835\\uDCB7\", \"Bscr\": \"\\u212C\", \"bsemi\": \"\\u204F\", \"bsim\": \"\\u223D\", \"bsime\": \"\\u22CD\", \"bsolb\": \"\\u29C5\", \"bsol\": \"\\\\\", \"bsolhsub\": \"\\u27C8\", \"bull\": \"\\u2022\", \"bullet\": \"\\u2022\", \"bump\": \"\\u224E\", \"bumpE\": \"\\u2AAE\", \"bumpe\": \"\\u224F\", \"Bumpeq\": \"\\u224E\", \"bumpeq\": \"\\u224F\", \"Cacute\": \"\\u0106\", \"cacute\": \"\\u0107\", \"capand\": \"\\u2A44\", \"capbrcup\": \"\\u2A49\", \"capcap\": \"\\u2A4B\", \"cap\": \"\\u2229\", \"Cap\": \"\\u22D2\", \"capcup\": \"\\u2A47\", \"capdot\": \"\\u2A40\", \"CapitalDifferentialD\": \"\\u2145\", \"caps\": \"\\u2229\\uFE00\", \"caret\": \"\\u2041\", \"caron\": \"\\u02C7\", \"Cayleys\": \"\\u212D\", \"ccaps\": \"\\u2A4D\", \"Ccaron\": \"\\u010C\", \"ccaron\": \"\\u010D\", \"Ccedil\": \"\\u00C7\", \"ccedil\": \"\\u00E7\", \"Ccirc\": \"\\u0108\", \"ccirc\": \"\\u0109\", \"Cconint\": \"\\u2230\", \"ccups\": \"\\u2A4C\", \"ccupssm\": \"\\u2A50\", \"Cdot\": \"\\u010A\", \"cdot\": \"\\u010B\", \"cedil\": \"\\u00B8\", \"Cedilla\": \"\\u00B8\", \"cemptyv\": \"\\u29B2\", \"cent\": \"\\u00A2\", \"centerdot\": \"\\u00B7\", \"CenterDot\": \"\\u00B7\", \"cfr\": \"\\uD835\\uDD20\", \"Cfr\": \"\\u212D\", \"CHcy\": \"\\u0427\", \"chcy\": \"\\u0447\", \"check\": \"\\u2713\", \"checkmark\": \"\\u2713\", \"Chi\": \"\\u03A7\", \"chi\": \"\\u03C7\", \"circ\": \"\\u02C6\", \"circeq\": \"\\u2257\", \"circlearrowleft\": \"\\u21BA\", \"circlearrowright\": \"\\u21BB\", \"circledast\": \"\\u229B\", \"circledcirc\": \"\\u229A\", \"circleddash\": \"\\u229D\", \"CircleDot\": \"\\u2299\", \"circledR\": \"\\u00AE\", \"circledS\": \"\\u24C8\", \"CircleMinus\": \"\\u2296\", \"CirclePlus\": \"\\u2295\", \"CircleTimes\": \"\\u2297\", \"cir\": \"\\u25CB\", \"cirE\": \"\\u29C3\", \"cire\": \"\\u2257\", \"cirfnint\": \"\\u2A10\", \"cirmid\": \"\\u2AEF\", \"cirscir\": \"\\u29C2\", \"ClockwiseContourIntegral\": \"\\u2232\", \"CloseCurlyDoubleQuote\": \"\\u201D\", \"CloseCurlyQuote\": \"\\u2019\", \"clubs\": \"\\u2663\", \"clubsuit\": \"\\u2663\", \"colon\": \":\", \"Colon\": \"\\u2237\", \"Colone\": \"\\u2A74\", \"colone\": \"\\u2254\", \"coloneq\": \"\\u2254\", \"comma\": \",\", \"commat\": \"@\", \"comp\": \"\\u2201\", \"compfn\": \"\\u2218\", \"complement\": \"\\u2201\", \"complexes\": \"\\u2102\", \"cong\": \"\\u2245\", \"congdot\": \"\\u2A6D\", \"Congruent\": \"\\u2261\", \"conint\": \"\\u222E\", \"Conint\": \"\\u222F\", \"ContourIntegral\": \"\\u222E\", \"copf\": \"\\uD835\\uDD54\", \"Copf\": \"\\u2102\", \"coprod\": \"\\u2210\", \"Coproduct\": \"\\u2210\", \"copy\": \"\\u00A9\", \"COPY\": \"\\u00A9\", \"copysr\": \"\\u2117\", \"CounterClockwiseContourIntegral\": \"\\u2233\", \"crarr\": \"\\u21B5\", \"cross\": \"\\u2717\", \"Cross\": \"\\u2A2F\", \"Cscr\": \"\\uD835\\uDC9E\", \"cscr\": \"\\uD835\\uDCB8\", \"csub\": \"\\u2ACF\", \"csube\": \"\\u2AD1\", \"csup\": \"\\u2AD0\", \"csupe\": \"\\u2AD2\", \"ctdot\": \"\\u22EF\", \"cudarrl\": \"\\u2938\", \"cudarrr\": \"\\u2935\", \"cuepr\": \"\\u22DE\", \"cuesc\": \"\\u22DF\", \"cularr\": \"\\u21B6\", \"cularrp\": \"\\u293D\", \"cupbrcap\": \"\\u2A48\", \"cupcap\": \"\\u2A46\", \"CupCap\": \"\\u224D\", \"cup\": \"\\u222A\", \"Cup\": \"\\u22D3\", \"cupcup\": \"\\u2A4A\", \"cupdot\": \"\\u228D\", \"cupor\": \"\\u2A45\", \"cups\": \"\\u222A\\uFE00\", \"curarr\": \"\\u21B7\", \"curarrm\": \"\\u293C\", \"curlyeqprec\": \"\\u22DE\", \"curlyeqsucc\": \"\\u22DF\", \"curlyvee\": \"\\u22CE\", \"curlywedge\": \"\\u22CF\", \"curren\": \"\\u00A4\", \"curvearrowleft\": \"\\u21B6\", \"curvearrowright\": \"\\u21B7\", \"cuvee\": \"\\u22CE\", \"cuwed\": \"\\u22CF\", \"cwconint\": \"\\u2232\", \"cwint\": \"\\u2231\", \"cylcty\": \"\\u232D\", \"dagger\": \"\\u2020\", \"Dagger\": \"\\u2021\", \"daleth\": \"\\u2138\", \"darr\": \"\\u2193\", \"Darr\": \"\\u21A1\", \"dArr\": \"\\u21D3\", \"dash\": \"\\u2010\", \"Dashv\": \"\\u2AE4\", \"dashv\": \"\\u22A3\", \"dbkarow\": \"\\u290F\", \"dblac\": \"\\u02DD\", \"Dcaron\": \"\\u010E\", \"dcaron\": \"\\u010F\", \"Dcy\": \"\\u0414\", \"dcy\": \"\\u0434\", \"ddagger\": \"\\u2021\", \"ddarr\": \"\\u21CA\", \"DD\": \"\\u2145\", \"dd\": \"\\u2146\", \"DDotrahd\": \"\\u2911\", \"ddotseq\": \"\\u2A77\", \"deg\": \"\\u00B0\", \"Del\": \"\\u2207\", \"Delta\": \"\\u0394\", \"delta\": \"\\u03B4\", \"demptyv\": \"\\u29B1\", \"dfisht\": \"\\u297F\", \"Dfr\": \"\\uD835\\uDD07\", \"dfr\": \"\\uD835\\uDD21\", \"dHar\": \"\\u2965\", \"dharl\": \"\\u21C3\", \"dharr\": \"\\u21C2\", \"DiacriticalAcute\": \"\\u00B4\", \"DiacriticalDot\": \"\\u02D9\", \"DiacriticalDoubleAcute\": \"\\u02DD\", \"DiacriticalGrave\": \"`\", \"DiacriticalTilde\": \"\\u02DC\", \"diam\": \"\\u22C4\", \"diamond\": \"\\u22C4\", \"Diamond\": \"\\u22C4\", \"diamondsuit\": \"\\u2666\", \"diams\": \"\\u2666\", \"die\": \"\\u00A8\", \"DifferentialD\": \"\\u2146\", \"digamma\": \"\\u03DD\", \"disin\": \"\\u22F2\", \"div\": \"\\u00F7\", \"divide\": \"\\u00F7\", \"divideontimes\": \"\\u22C7\", \"divonx\": \"\\u22C7\", \"DJcy\": \"\\u0402\", \"djcy\": \"\\u0452\", \"dlcorn\": \"\\u231E\", \"dlcrop\": \"\\u230D\", \"dollar\": \"$\", \"Dopf\": \"\\uD835\\uDD3B\", \"dopf\": \"\\uD835\\uDD55\", \"Dot\": \"\\u00A8\", \"dot\": \"\\u02D9\", \"DotDot\": \"\\u20DC\", \"doteq\": \"\\u2250\", \"doteqdot\": \"\\u2251\", \"DotEqual\": \"\\u2250\", \"dotminus\": \"\\u2238\", \"dotplus\": \"\\u2214\", \"dotsquare\": \"\\u22A1\", \"doublebarwedge\": \"\\u2306\", \"DoubleContourIntegral\": \"\\u222F\", \"DoubleDot\": \"\\u00A8\", \"DoubleDownArrow\": \"\\u21D3\", \"DoubleLeftArrow\": \"\\u21D0\", \"DoubleLeftRightArrow\": \"\\u21D4\", \"DoubleLeftTee\": \"\\u2AE4\", \"DoubleLongLeftArrow\": \"\\u27F8\", \"DoubleLongLeftRightArrow\": \"\\u27FA\", \"DoubleLongRightArrow\": \"\\u27F9\", \"DoubleRightArrow\": \"\\u21D2\", \"DoubleRightTee\": \"\\u22A8\", \"DoubleUpArrow\": \"\\u21D1\", \"DoubleUpDownArrow\": \"\\u21D5\", \"DoubleVerticalBar\": \"\\u2225\", \"DownArrowBar\": \"\\u2913\", \"downarrow\": \"\\u2193\", \"DownArrow\": \"\\u2193\", \"Downarrow\": \"\\u21D3\", \"DownArrowUpArrow\": \"\\u21F5\", \"DownBreve\": \"\\u0311\", \"downdownarrows\": \"\\u21CA\", \"downharpoonleft\": \"\\u21C3\", \"downharpoonright\": \"\\u21C2\", \"DownLeftRightVector\": \"\\u2950\", \"DownLeftTeeVector\": \"\\u295E\", \"DownLeftVectorBar\": \"\\u2956\", \"DownLeftVector\": \"\\u21BD\", \"DownRightTeeVector\": \"\\u295F\", \"DownRightVectorBar\": \"\\u2957\", \"DownRightVector\": \"\\u21C1\", \"DownTeeArrow\": \"\\u21A7\", \"DownTee\": \"\\u22A4\", \"drbkarow\": \"\\u2910\", \"drcorn\": \"\\u231F\", \"drcrop\": \"\\u230C\", \"Dscr\": \"\\uD835\\uDC9F\", \"dscr\": \"\\uD835\\uDCB9\", \"DScy\": \"\\u0405\", \"dscy\": \"\\u0455\", \"dsol\": \"\\u29F6\", \"Dstrok\": \"\\u0110\", \"dstrok\": \"\\u0111\", \"dtdot\": \"\\u22F1\", \"dtri\": \"\\u25BF\", \"dtrif\": \"\\u25BE\", \"duarr\": \"\\u21F5\", \"duhar\": \"\\u296F\", \"dwangle\": \"\\u29A6\", \"DZcy\": \"\\u040F\", \"dzcy\": \"\\u045F\", \"dzigrarr\": \"\\u27FF\", \"Eacute\": \"\\u00C9\", \"eacute\": \"\\u00E9\", \"easter\": \"\\u2A6E\", \"Ecaron\": \"\\u011A\", \"ecaron\": \"\\u011B\", \"Ecirc\": \"\\u00CA\", \"ecirc\": \"\\u00EA\", \"ecir\": \"\\u2256\", \"ecolon\": \"\\u2255\", \"Ecy\": \"\\u042D\", \"ecy\": \"\\u044D\", \"eDDot\": \"\\u2A77\", \"Edot\": \"\\u0116\", \"edot\": \"\\u0117\", \"eDot\": \"\\u2251\", \"ee\": \"\\u2147\", \"efDot\": \"\\u2252\", \"Efr\": \"\\uD835\\uDD08\", \"efr\": \"\\uD835\\uDD22\", \"eg\": \"\\u2A9A\", \"Egrave\": \"\\u00C8\", \"egrave\": \"\\u00E8\", \"egs\": \"\\u2A96\", \"egsdot\": \"\\u2A98\", \"el\": \"\\u2A99\", \"Element\": \"\\u2208\", \"elinters\": \"\\u23E7\", \"ell\": \"\\u2113\", \"els\": \"\\u2A95\", \"elsdot\": \"\\u2A97\", \"Emacr\": \"\\u0112\", \"emacr\": \"\\u0113\", \"empty\": \"\\u2205\", \"emptyset\": \"\\u2205\", \"EmptySmallSquare\": \"\\u25FB\", \"emptyv\": \"\\u2205\", \"EmptyVerySmallSquare\": \"\\u25AB\", \"emsp13\": \"\\u2004\", \"emsp14\": \"\\u2005\", \"emsp\": \"\\u2003\", \"ENG\": \"\\u014A\", \"eng\": \"\\u014B\", \"ensp\": \"\\u2002\", \"Eogon\": \"\\u0118\", \"eogon\": \"\\u0119\", \"Eopf\": \"\\uD835\\uDD3C\", \"eopf\": \"\\uD835\\uDD56\", \"epar\": \"\\u22D5\", \"eparsl\": \"\\u29E3\", \"eplus\": \"\\u2A71\", \"epsi\": \"\\u03B5\", \"Epsilon\": \"\\u0395\", \"epsilon\": \"\\u03B5\", \"epsiv\": \"\\u03F5\", \"eqcirc\": \"\\u2256\", \"eqcolon\": \"\\u2255\", \"eqsim\": \"\\u2242\", \"eqslantgtr\": \"\\u2A96\", \"eqslantless\": \"\\u2A95\", \"Equal\": \"\\u2A75\", \"equals\": \"=\", \"EqualTilde\": \"\\u2242\", \"equest\": \"\\u225F\", \"Equilibrium\": \"\\u21CC\", \"equiv\": \"\\u2261\", \"equivDD\": \"\\u2A78\", \"eqvparsl\": \"\\u29E5\", \"erarr\": \"\\u2971\", \"erDot\": \"\\u2253\", \"escr\": \"\\u212F\", \"Escr\": \"\\u2130\", \"esdot\": \"\\u2250\", \"Esim\": \"\\u2A73\", \"esim\": \"\\u2242\", \"Eta\": \"\\u0397\", \"eta\": \"\\u03B7\", \"ETH\": \"\\u00D0\", \"eth\": \"\\u00F0\", \"Euml\": \"\\u00CB\", \"euml\": \"\\u00EB\", \"euro\": \"\\u20AC\", \"excl\": \"!\", \"exist\": \"\\u2203\", \"Exists\": \"\\u2203\", \"expectation\": \"\\u2130\", \"exponentiale\": \"\\u2147\", \"ExponentialE\": \"\\u2147\", \"fallingdotseq\": \"\\u2252\", \"Fcy\": \"\\u0424\", \"fcy\": \"\\u0444\", \"female\": \"\\u2640\", \"ffilig\": \"\\uFB03\", \"fflig\": \"\\uFB00\", \"ffllig\": \"\\uFB04\", \"Ffr\": \"\\uD835\\uDD09\", \"ffr\": \"\\uD835\\uDD23\", \"filig\": \"\\uFB01\", \"FilledSmallSquare\": \"\\u25FC\", \"FilledVerySmallSquare\": \"\\u25AA\", \"fjlig\": \"fj\", \"flat\": \"\\u266D\", \"fllig\": \"\\uFB02\", \"fltns\": \"\\u25B1\", \"fnof\": \"\\u0192\", \"Fopf\": \"\\uD835\\uDD3D\", \"fopf\": \"\\uD835\\uDD57\", \"forall\": \"\\u2200\", \"ForAll\": \"\\u2200\", \"fork\": \"\\u22D4\", \"forkv\": \"\\u2AD9\", \"Fouriertrf\": \"\\u2131\", \"fpartint\": \"\\u2A0D\", \"frac12\": \"\\u00BD\", \"frac13\": \"\\u2153\", \"frac14\": \"\\u00BC\", \"frac15\": \"\\u2155\", \"frac16\": \"\\u2159\", \"frac18\": \"\\u215B\", \"frac23\": \"\\u2154\", \"frac25\": \"\\u2156\", \"frac34\": \"\\u00BE\", \"frac35\": \"\\u2157\", \"frac38\": \"\\u215C\", \"frac45\": \"\\u2158\", \"frac56\": \"\\u215A\", \"frac58\": \"\\u215D\", \"frac78\": \"\\u215E\", \"frasl\": \"\\u2044\", \"frown\": \"\\u2322\", \"fscr\": \"\\uD835\\uDCBB\", \"Fscr\": \"\\u2131\", \"gacute\": \"\\u01F5\", \"Gamma\": \"\\u0393\", \"gamma\": \"\\u03B3\", \"Gammad\": \"\\u03DC\", \"gammad\": \"\\u03DD\", \"gap\": \"\\u2A86\", \"Gbreve\": \"\\u011E\", \"gbreve\": \"\\u011F\", \"Gcedil\": \"\\u0122\", \"Gcirc\": \"\\u011C\", \"gcirc\": \"\\u011D\", \"Gcy\": \"\\u0413\", \"gcy\": \"\\u0433\", \"Gdot\": \"\\u0120\", \"gdot\": \"\\u0121\", \"ge\": \"\\u2265\", \"gE\": \"\\u2267\", \"gEl\": \"\\u2A8C\", \"gel\": \"\\u22DB\", \"geq\": \"\\u2265\", \"geqq\": \"\\u2267\", \"geqslant\": \"\\u2A7E\", \"gescc\": \"\\u2AA9\", \"ges\": \"\\u2A7E\", \"gesdot\": \"\\u2A80\", \"gesdoto\": \"\\u2A82\", \"gesdotol\": \"\\u2A84\", \"gesl\": \"\\u22DB\\uFE00\", \"gesles\": \"\\u2A94\", \"Gfr\": \"\\uD835\\uDD0A\", \"gfr\": \"\\uD835\\uDD24\", \"gg\": \"\\u226B\", \"Gg\": \"\\u22D9\", \"ggg\": \"\\u22D9\", \"gimel\": \"\\u2137\", \"GJcy\": \"\\u0403\", \"gjcy\": \"\\u0453\", \"gla\": \"\\u2AA5\", \"gl\": \"\\u2277\", \"glE\": \"\\u2A92\", \"glj\": \"\\u2AA4\", \"gnap\": \"\\u2A8A\", \"gnapprox\": \"\\u2A8A\", \"gne\": \"\\u2A88\", \"gnE\": \"\\u2269\", \"gneq\": \"\\u2A88\", \"gneqq\": \"\\u2269\", \"gnsim\": \"\\u22E7\", \"Gopf\": \"\\uD835\\uDD3E\", \"gopf\": \"\\uD835\\uDD58\", \"grave\": \"`\", \"GreaterEqual\": \"\\u2265\", \"GreaterEqualLess\": \"\\u22DB\", \"GreaterFullEqual\": \"\\u2267\", \"GreaterGreater\": \"\\u2AA2\", \"GreaterLess\": \"\\u2277\", \"GreaterSlantEqual\": \"\\u2A7E\", \"GreaterTilde\": \"\\u2273\", \"Gscr\": \"\\uD835\\uDCA2\", \"gscr\": \"\\u210A\", \"gsim\": \"\\u2273\", \"gsime\": \"\\u2A8E\", \"gsiml\": \"\\u2A90\", \"gtcc\": \"\\u2AA7\", \"gtcir\": \"\\u2A7A\", \"gt\": \">\", \"GT\": \">\", \"Gt\": \"\\u226B\", \"gtdot\": \"\\u22D7\", \"gtlPar\": \"\\u2995\", \"gtquest\": \"\\u2A7C\", \"gtrapprox\": \"\\u2A86\", \"gtrarr\": \"\\u2978\", \"gtrdot\": \"\\u22D7\", \"gtreqless\": \"\\u22DB\", \"gtreqqless\": \"\\u2A8C\", \"gtrless\": \"\\u2277\", \"gtrsim\": \"\\u2273\", \"gvertneqq\": \"\\u2269\\uFE00\", \"gvnE\": \"\\u2269\\uFE00\", \"Hacek\": \"\\u02C7\", \"hairsp\": \"\\u200A\", \"half\": \"\\u00BD\", \"hamilt\": \"\\u210B\", \"HARDcy\": \"\\u042A\", \"hardcy\": \"\\u044A\", \"harrcir\": \"\\u2948\", \"harr\": \"\\u2194\", \"hArr\": \"\\u21D4\", \"harrw\": \"\\u21AD\", \"Hat\": \"^\", \"hbar\": \"\\u210F\", \"Hcirc\": \"\\u0124\", \"hcirc\": \"\\u0125\", \"hearts\": \"\\u2665\", \"heartsuit\": \"\\u2665\", \"hellip\": \"\\u2026\", \"hercon\": \"\\u22B9\", \"hfr\": \"\\uD835\\uDD25\", \"Hfr\": \"\\u210C\", \"HilbertSpace\": \"\\u210B\", \"hksearow\": \"\\u2925\", \"hkswarow\": \"\\u2926\", \"hoarr\": \"\\u21FF\", \"homtht\": \"\\u223B\", \"hookleftarrow\": \"\\u21A9\", \"hookrightarrow\": \"\\u21AA\", \"hopf\": \"\\uD835\\uDD59\", \"Hopf\": \"\\u210D\", \"horbar\": \"\\u2015\", \"HorizontalLine\": \"\\u2500\", \"hscr\": \"\\uD835\\uDCBD\", \"Hscr\": \"\\u210B\", \"hslash\": \"\\u210F\", \"Hstrok\": \"\\u0126\", \"hstrok\": \"\\u0127\", \"HumpDownHump\": \"\\u224E\", \"HumpEqual\": \"\\u224F\", \"hybull\": \"\\u2043\", \"hyphen\": \"\\u2010\", \"Iacute\": \"\\u00CD\", \"iacute\": \"\\u00ED\", \"ic\": \"\\u2063\", \"Icirc\": \"\\u00CE\", \"icirc\": \"\\u00EE\", \"Icy\": \"\\u0418\", \"icy\": \"\\u0438\", \"Idot\": \"\\u0130\", \"IEcy\": \"\\u0415\", \"iecy\": \"\\u0435\", \"iexcl\": \"\\u00A1\", \"iff\": \"\\u21D4\", \"ifr\": \"\\uD835\\uDD26\", \"Ifr\": \"\\u2111\", \"Igrave\": \"\\u00CC\", \"igrave\": \"\\u00EC\", \"ii\": \"\\u2148\", \"iiiint\": \"\\u2A0C\", \"iiint\": \"\\u222D\", \"iinfin\": \"\\u29DC\", \"iiota\": \"\\u2129\", \"IJlig\": \"\\u0132\", \"ijlig\": \"\\u0133\", \"Imacr\": \"\\u012A\", \"imacr\": \"\\u012B\", \"image\": \"\\u2111\", \"ImaginaryI\": \"\\u2148\", \"imagline\": \"\\u2110\", \"imagpart\": \"\\u2111\", \"imath\": \"\\u0131\", \"Im\": \"\\u2111\", \"imof\": \"\\u22B7\", \"imped\": \"\\u01B5\", \"Implies\": \"\\u21D2\", \"incare\": \"\\u2105\", \"in\": \"\\u2208\", \"infin\": \"\\u221E\", \"infintie\": \"\\u29DD\", \"inodot\": \"\\u0131\", \"intcal\": \"\\u22BA\", \"int\": \"\\u222B\", \"Int\": \"\\u222C\", \"integers\": \"\\u2124\", \"Integral\": \"\\u222B\", \"intercal\": \"\\u22BA\", \"Intersection\": \"\\u22C2\", \"intlarhk\": \"\\u2A17\", \"intprod\": \"\\u2A3C\", \"InvisibleComma\": \"\\u2063\", \"InvisibleTimes\": \"\\u2062\", \"IOcy\": \"\\u0401\", \"iocy\": \"\\u0451\", \"Iogon\": \"\\u012E\", \"iogon\": \"\\u012F\", \"Iopf\": \"\\uD835\\uDD40\", \"iopf\": \"\\uD835\\uDD5A\", \"Iota\": \"\\u0399\", \"iota\": \"\\u03B9\", \"iprod\": \"\\u2A3C\", \"iquest\": \"\\u00BF\", \"iscr\": \"\\uD835\\uDCBE\", \"Iscr\": \"\\u2110\", \"isin\": \"\\u2208\", \"isindot\": \"\\u22F5\", \"isinE\": \"\\u22F9\", \"isins\": \"\\u22F4\", \"isinsv\": \"\\u22F3\", \"isinv\": \"\\u2208\", \"it\": \"\\u2062\", \"Itilde\": \"\\u0128\", \"itilde\": \"\\u0129\", \"Iukcy\": \"\\u0406\", \"iukcy\": \"\\u0456\", \"Iuml\": \"\\u00CF\", \"iuml\": \"\\u00EF\", \"Jcirc\": \"\\u0134\", \"jcirc\": \"\\u0135\", \"Jcy\": \"\\u0419\", \"jcy\": \"\\u0439\", \"Jfr\": \"\\uD835\\uDD0D\", \"jfr\": \"\\uD835\\uDD27\", \"jmath\": \"\\u0237\", \"Jopf\": \"\\uD835\\uDD41\", \"jopf\": \"\\uD835\\uDD5B\", \"Jscr\": \"\\uD835\\uDCA5\", \"jscr\": \"\\uD835\\uDCBF\", \"Jsercy\": \"\\u0408\", \"jsercy\": \"\\u0458\", \"Jukcy\": \"\\u0404\", \"jukcy\": \"\\u0454\", \"Kappa\": \"\\u039A\", \"kappa\": \"\\u03BA\", \"kappav\": \"\\u03F0\", \"Kcedil\": \"\\u0136\", \"kcedil\": \"\\u0137\", \"Kcy\": \"\\u041A\", \"kcy\": \"\\u043A\", \"Kfr\": \"\\uD835\\uDD0E\", \"kfr\": \"\\uD835\\uDD28\", \"kgreen\": \"\\u0138\", \"KHcy\": \"\\u0425\", \"khcy\": \"\\u0445\", \"KJcy\": \"\\u040C\", \"kjcy\": \"\\u045C\", \"Kopf\": \"\\uD835\\uDD42\", \"kopf\": \"\\uD835\\uDD5C\", \"Kscr\": \"\\uD835\\uDCA6\", \"kscr\": \"\\uD835\\uDCC0\", \"lAarr\": \"\\u21DA\", \"Lacute\": \"\\u0139\", \"lacute\": \"\\u013A\", \"laemptyv\": \"\\u29B4\", \"lagran\": \"\\u2112\", \"Lambda\": \"\\u039B\", \"lambda\": \"\\u03BB\", \"lang\": \"\\u27E8\", \"Lang\": \"\\u27EA\", \"langd\": \"\\u2991\", \"langle\": \"\\u27E8\", \"lap\": \"\\u2A85\", \"Laplacetrf\": \"\\u2112\", \"laquo\": \"\\u00AB\", \"larrb\": \"\\u21E4\", \"larrbfs\": \"\\u291F\", \"larr\": \"\\u2190\", \"Larr\": \"\\u219E\", \"lArr\": \"\\u21D0\", \"larrfs\": \"\\u291D\", \"larrhk\": \"\\u21A9\", \"larrlp\": \"\\u21AB\", \"larrpl\": \"\\u2939\", \"larrsim\": \"\\u2973\", \"larrtl\": \"\\u21A2\", \"latail\": \"\\u2919\", \"lAtail\": \"\\u291B\", \"lat\": \"\\u2AAB\", \"late\": \"\\u2AAD\", \"lates\": \"\\u2AAD\\uFE00\", \"lbarr\": \"\\u290C\", \"lBarr\": \"\\u290E\", \"lbbrk\": \"\\u2772\", \"lbrace\": \"{\", \"lbrack\": \"[\", \"lbrke\": \"\\u298B\", \"lbrksld\": \"\\u298F\", \"lbrkslu\": \"\\u298D\", \"Lcaron\": \"\\u013D\", \"lcaron\": \"\\u013E\", \"Lcedil\": \"\\u013B\", \"lcedil\": \"\\u013C\", \"lceil\": \"\\u2308\", \"lcub\": \"{\", \"Lcy\": \"\\u041B\", \"lcy\": \"\\u043B\", \"ldca\": \"\\u2936\", \"ldquo\": \"\\u201C\", \"ldquor\": \"\\u201E\", \"ldrdhar\": \"\\u2967\", \"ldrushar\": \"\\u294B\", \"ldsh\": \"\\u21B2\", \"le\": \"\\u2264\", \"lE\": \"\\u2266\", \"LeftAngleBracket\": \"\\u27E8\", \"LeftArrowBar\": \"\\u21E4\", \"leftarrow\": \"\\u2190\", \"LeftArrow\": \"\\u2190\", \"Leftarrow\": \"\\u21D0\", \"LeftArrowRightArrow\": \"\\u21C6\", \"leftarrowtail\": \"\\u21A2\", \"LeftCeiling\": \"\\u2308\", \"LeftDoubleBracket\": \"\\u27E6\", \"LeftDownTeeVector\": \"\\u2961\", \"LeftDownVectorBar\": \"\\u2959\", \"LeftDownVector\": \"\\u21C3\", \"LeftFloor\": \"\\u230A\", \"leftharpoondown\": \"\\u21BD\", \"leftharpoonup\": \"\\u21BC\", \"leftleftarrows\": \"\\u21C7\", \"leftrightarrow\": \"\\u2194\", \"LeftRightArrow\": \"\\u2194\", \"Leftrightarrow\": \"\\u21D4\", \"leftrightarrows\": \"\\u21C6\", \"leftrightharpoons\": \"\\u21CB\", \"leftrightsquigarrow\": \"\\u21AD\", \"LeftRightVector\": \"\\u294E\", \"LeftTeeArrow\": \"\\u21A4\", \"LeftTee\": \"\\u22A3\", \"LeftTeeVector\": \"\\u295A\", \"leftthreetimes\": \"\\u22CB\", \"LeftTriangleBar\": \"\\u29CF\", \"LeftTriangle\": \"\\u22B2\", \"LeftTriangleEqual\": \"\\u22B4\", \"LeftUpDownVector\": \"\\u2951\", \"LeftUpTeeVector\": \"\\u2960\", \"LeftUpVectorBar\": \"\\u2958\", \"LeftUpVector\": \"\\u21BF\", \"LeftVectorBar\": \"\\u2952\", \"LeftVector\": \"\\u21BC\", \"lEg\": \"\\u2A8B\", \"leg\": \"\\u22DA\", \"leq\": \"\\u2264\", \"leqq\": \"\\u2266\", \"leqslant\": \"\\u2A7D\", \"lescc\": \"\\u2AA8\", \"les\": \"\\u2A7D\", \"lesdot\": \"\\u2A7F\", \"lesdoto\": \"\\u2A81\", \"lesdotor\": \"\\u2A83\", \"lesg\": \"\\u22DA\\uFE00\", \"lesges\": \"\\u2A93\", \"lessapprox\": \"\\u2A85\", \"lessdot\": \"\\u22D6\", \"lesseqgtr\": \"\\u22DA\", \"lesseqqgtr\": \"\\u2A8B\", \"LessEqualGreater\": \"\\u22DA\", \"LessFullEqual\": \"\\u2266\", \"LessGreater\": \"\\u2276\", \"lessgtr\": \"\\u2276\", \"LessLess\": \"\\u2AA1\", \"lesssim\": \"\\u2272\", \"LessSlantEqual\": \"\\u2A7D\", \"LessTilde\": \"\\u2272\", \"lfisht\": \"\\u297C\", \"lfloor\": \"\\u230A\", \"Lfr\": \"\\uD835\\uDD0F\", \"lfr\": \"\\uD835\\uDD29\", \"lg\": \"\\u2276\", \"lgE\": \"\\u2A91\", \"lHar\": \"\\u2962\", \"lhard\": \"\\u21BD\", \"lharu\": \"\\u21BC\", \"lharul\": \"\\u296A\", \"lhblk\": \"\\u2584\", \"LJcy\": \"\\u0409\", \"ljcy\": \"\\u0459\", \"llarr\": \"\\u21C7\", \"ll\": \"\\u226A\", \"Ll\": \"\\u22D8\", \"llcorner\": \"\\u231E\", \"Lleftarrow\": \"\\u21DA\", \"llhard\": \"\\u296B\", \"lltri\": \"\\u25FA\", \"Lmidot\": \"\\u013F\", \"lmidot\": \"\\u0140\", \"lmoustache\": \"\\u23B0\", \"lmoust\": \"\\u23B0\", \"lnap\": \"\\u2A89\", \"lnapprox\": \"\\u2A89\", \"lne\": \"\\u2A87\", \"lnE\": \"\\u2268\", \"lneq\": \"\\u2A87\", \"lneqq\": \"\\u2268\", \"lnsim\": \"\\u22E6\", \"loang\": \"\\u27EC\", \"loarr\": \"\\u21FD\", \"lobrk\": \"\\u27E6\", \"longleftarrow\": \"\\u27F5\", \"LongLeftArrow\": \"\\u27F5\", \"Longleftarrow\": \"\\u27F8\", \"longleftrightarrow\": \"\\u27F7\", \"LongLeftRightArrow\": \"\\u27F7\", \"Longleftrightarrow\": \"\\u27FA\", \"longmapsto\": \"\\u27FC\", \"longrightarrow\": \"\\u27F6\", \"LongRightArrow\": \"\\u27F6\", \"Longrightarrow\": \"\\u27F9\", \"looparrowleft\": \"\\u21AB\", \"looparrowright\": \"\\u21AC\", \"lopar\": \"\\u2985\", \"Lopf\": \"\\uD835\\uDD43\", \"lopf\": \"\\uD835\\uDD5D\", \"loplus\": \"\\u2A2D\", \"lotimes\": \"\\u2A34\", \"lowast\": \"\\u2217\", \"lowbar\": \"_\", \"LowerLeftArrow\": \"\\u2199\", \"LowerRightArrow\": \"\\u2198\", \"loz\": \"\\u25CA\", \"lozenge\": \"\\u25CA\", \"lozf\": \"\\u29EB\", \"lpar\": \"(\", \"lparlt\": \"\\u2993\", \"lrarr\": \"\\u21C6\", \"lrcorner\": \"\\u231F\", \"lrhar\": \"\\u21CB\", \"lrhard\": \"\\u296D\", \"lrm\": \"\\u200E\", \"lrtri\": \"\\u22BF\", \"lsaquo\": \"\\u2039\", \"lscr\": \"\\uD835\\uDCC1\", \"Lscr\": \"\\u2112\", \"lsh\": \"\\u21B0\", \"Lsh\": \"\\u21B0\", \"lsim\": \"\\u2272\", \"lsime\": \"\\u2A8D\", \"lsimg\": \"\\u2A8F\", \"lsqb\": \"[\", \"lsquo\": \"\\u2018\", \"lsquor\": \"\\u201A\", \"Lstrok\": \"\\u0141\", \"lstrok\": \"\\u0142\", \"ltcc\": \"\\u2AA6\", \"ltcir\": \"\\u2A79\", \"lt\": \"<\", \"LT\": \"<\", \"Lt\": \"\\u226A\", \"ltdot\": \"\\u22D6\", \"lthree\": \"\\u22CB\", \"ltimes\": \"\\u22C9\", \"ltlarr\": \"\\u2976\", \"ltquest\": \"\\u2A7B\", \"ltri\": \"\\u25C3\", \"ltrie\": \"\\u22B4\", \"ltrif\": \"\\u25C2\", \"ltrPar\": \"\\u2996\", \"lurdshar\": \"\\u294A\", \"luruhar\": \"\\u2966\", \"lvertneqq\": \"\\u2268\\uFE00\", \"lvnE\": \"\\u2268\\uFE00\", \"macr\": \"\\u00AF\", \"male\": \"\\u2642\", \"malt\": \"\\u2720\", \"maltese\": \"\\u2720\", \"Map\": \"\\u2905\", \"map\": \"\\u21A6\", \"mapsto\": \"\\u21A6\", \"mapstodown\": \"\\u21A7\", \"mapstoleft\": \"\\u21A4\", \"mapstoup\": \"\\u21A5\", \"marker\": \"\\u25AE\", \"mcomma\": \"\\u2A29\", \"Mcy\": \"\\u041C\", \"mcy\": \"\\u043C\", \"mdash\": \"\\u2014\", \"mDDot\": \"\\u223A\", \"measuredangle\": \"\\u2221\", \"MediumSpace\": \"\\u205F\", \"Mellintrf\": \"\\u2133\", \"Mfr\": \"\\uD835\\uDD10\", \"mfr\": \"\\uD835\\uDD2A\", \"mho\": \"\\u2127\", \"micro\": \"\\u00B5\", \"midast\": \"*\", \"midcir\": \"\\u2AF0\", \"mid\": \"\\u2223\", \"middot\": \"\\u00B7\", \"minusb\": \"\\u229F\", \"minus\": \"\\u2212\", \"minusd\": \"\\u2238\", \"minusdu\": \"\\u2A2A\", \"MinusPlus\": \"\\u2213\", \"mlcp\": \"\\u2ADB\", \"mldr\": \"\\u2026\", \"mnplus\": \"\\u2213\", \"models\": \"\\u22A7\", \"Mopf\": \"\\uD835\\uDD44\", \"mopf\": \"\\uD835\\uDD5E\", \"mp\": \"\\u2213\", \"mscr\": \"\\uD835\\uDCC2\", \"Mscr\": \"\\u2133\", \"mstpos\": \"\\u223E\", \"Mu\": \"\\u039C\", \"mu\": \"\\u03BC\", \"multimap\": \"\\u22B8\", \"mumap\": \"\\u22B8\", \"nabla\": \"\\u2207\", \"Nacute\": \"\\u0143\", \"nacute\": \"\\u0144\", \"nang\": \"\\u2220\\u20D2\", \"nap\": \"\\u2249\", \"napE\": \"\\u2A70\\u0338\", \"napid\": \"\\u224B\\u0338\", \"napos\": \"\\u0149\", \"napprox\": \"\\u2249\", \"natural\": \"\\u266E\", \"naturals\": \"\\u2115\", \"natur\": \"\\u266E\", \"nbsp\": \"\\u00A0\", \"nbump\": \"\\u224E\\u0338\", \"nbumpe\": \"\\u224F\\u0338\", \"ncap\": \"\\u2A43\", \"Ncaron\": \"\\u0147\", \"ncaron\": \"\\u0148\", \"Ncedil\": \"\\u0145\", \"ncedil\": \"\\u0146\", \"ncong\": \"\\u2247\", \"ncongdot\": \"\\u2A6D\\u0338\", \"ncup\": \"\\u2A42\", \"Ncy\": \"\\u041D\", \"ncy\": \"\\u043D\", \"ndash\": \"\\u2013\", \"nearhk\": \"\\u2924\", \"nearr\": \"\\u2197\", \"neArr\": \"\\u21D7\", \"nearrow\": \"\\u2197\", \"ne\": \"\\u2260\", \"nedot\": \"\\u2250\\u0338\", \"NegativeMediumSpace\": \"\\u200B\", \"NegativeThickSpace\": \"\\u200B\", \"NegativeThinSpace\": \"\\u200B\", \"NegativeVeryThinSpace\": \"\\u200B\", \"nequiv\": \"\\u2262\", \"nesear\": \"\\u2928\", \"nesim\": \"\\u2242\\u0338\", \"NestedGreaterGreater\": \"\\u226B\", \"NestedLessLess\": \"\\u226A\", \"NewLine\": \"\\n\", \"nexist\": \"\\u2204\", \"nexists\": \"\\u2204\", \"Nfr\": \"\\uD835\\uDD11\", \"nfr\": \"\\uD835\\uDD2B\", \"ngE\": \"\\u2267\\u0338\", \"nge\": \"\\u2271\", \"ngeq\": \"\\u2271\", \"ngeqq\": \"\\u2267\\u0338\", \"ngeqslant\": \"\\u2A7E\\u0338\", \"nges\": \"\\u2A7E\\u0338\", \"nGg\": \"\\u22D9\\u0338\", \"ngsim\": \"\\u2275\", \"nGt\": \"\\u226B\\u20D2\", \"ngt\": \"\\u226F\", \"ngtr\": \"\\u226F\", \"nGtv\": \"\\u226B\\u0338\", \"nharr\": \"\\u21AE\", \"nhArr\": \"\\u21CE\", \"nhpar\": \"\\u2AF2\", \"ni\": \"\\u220B\", \"nis\": \"\\u22FC\", \"nisd\": \"\\u22FA\", \"niv\": \"\\u220B\", \"NJcy\": \"\\u040A\", \"njcy\": \"\\u045A\", \"nlarr\": \"\\u219A\", \"nlArr\": \"\\u21CD\", \"nldr\": \"\\u2025\", \"nlE\": \"\\u2266\\u0338\", \"nle\": \"\\u2270\", \"nleftarrow\": \"\\u219A\", \"nLeftarrow\": \"\\u21CD\", \"nleftrightarrow\": \"\\u21AE\", \"nLeftrightarrow\": \"\\u21CE\", \"nleq\": \"\\u2270\", \"nleqq\": \"\\u2266\\u0338\", \"nleqslant\": \"\\u2A7D\\u0338\", \"nles\": \"\\u2A7D\\u0338\", \"nless\": \"\\u226E\", \"nLl\": \"\\u22D8\\u0338\", \"nlsim\": \"\\u2274\", \"nLt\": \"\\u226A\\u20D2\", \"nlt\": \"\\u226E\", \"nltri\": \"\\u22EA\", \"nltrie\": \"\\u22EC\", \"nLtv\": \"\\u226A\\u0338\", \"nmid\": \"\\u2224\", \"NoBreak\": \"\\u2060\", \"NonBreakingSpace\": \"\\u00A0\", \"nopf\": \"\\uD835\\uDD5F\", \"Nopf\": \"\\u2115\", \"Not\": \"\\u2AEC\", \"not\": \"\\u00AC\", \"NotCongruent\": \"\\u2262\", \"NotCupCap\": \"\\u226D\", \"NotDoubleVerticalBar\": \"\\u2226\", \"NotElement\": \"\\u2209\", \"NotEqual\": \"\\u2260\", \"NotEqualTilde\": \"\\u2242\\u0338\", \"NotExists\": \"\\u2204\", \"NotGreater\": \"\\u226F\", \"NotGreaterEqual\": \"\\u2271\", \"NotGreaterFullEqual\": \"\\u2267\\u0338\", \"NotGreaterGreater\": \"\\u226B\\u0338\", \"NotGreaterLess\": \"\\u2279\", \"NotGreaterSlantEqual\": \"\\u2A7E\\u0338\", \"NotGreaterTilde\": \"\\u2275\", \"NotHumpDownHump\": \"\\u224E\\u0338\", \"NotHumpEqual\": \"\\u224F\\u0338\", \"notin\": \"\\u2209\", \"notindot\": \"\\u22F5\\u0338\", \"notinE\": \"\\u22F9\\u0338\", \"notinva\": \"\\u2209\", \"notinvb\": \"\\u22F7\", \"notinvc\": \"\\u22F6\", \"NotLeftTriangleBar\": \"\\u29CF\\u0338\", \"NotLeftTriangle\": \"\\u22EA\", \"NotLeftTriangleEqual\": \"\\u22EC\", \"NotLess\": \"\\u226E\", \"NotLessEqual\": \"\\u2270\", \"NotLessGreater\": \"\\u2278\", \"NotLessLess\": \"\\u226A\\u0338\", \"NotLessSlantEqual\": \"\\u2A7D\\u0338\", \"NotLessTilde\": \"\\u2274\", \"NotNestedGreaterGreater\": \"\\u2AA2\\u0338\", \"NotNestedLessLess\": \"\\u2AA1\\u0338\", \"notni\": \"\\u220C\", \"notniva\": \"\\u220C\", \"notnivb\": \"\\u22FE\", \"notnivc\": \"\\u22FD\", \"NotPrecedes\": \"\\u2280\", \"NotPrecedesEqual\": \"\\u2AAF\\u0338\", \"NotPrecedesSlantEqual\": \"\\u22E0\", \"NotReverseElement\": \"\\u220C\", \"NotRightTriangleBar\": \"\\u29D0\\u0338\", \"NotRightTriangle\": \"\\u22EB\", \"NotRightTriangleEqual\": \"\\u22ED\", \"NotSquareSubset\": \"\\u228F\\u0338\", \"NotSquareSubsetEqual\": \"\\u22E2\", \"NotSquareSuperset\": \"\\u2290\\u0338\", \"NotSquareSupersetEqual\": \"\\u22E3\", \"NotSubset\": \"\\u2282\\u20D2\", \"NotSubsetEqual\": \"\\u2288\", \"NotSucceeds\": \"\\u2281\", \"NotSucceedsEqual\": \"\\u2AB0\\u0338\", \"NotSucceedsSlantEqual\": \"\\u22E1\", \"NotSucceedsTilde\": \"\\u227F\\u0338\", \"NotSuperset\": \"\\u2283\\u20D2\", \"NotSupersetEqual\": \"\\u2289\", \"NotTilde\": \"\\u2241\", \"NotTildeEqual\": \"\\u2244\", \"NotTildeFullEqual\": \"\\u2247\", \"NotTildeTilde\": \"\\u2249\", \"NotVerticalBar\": \"\\u2224\", \"nparallel\": \"\\u2226\", \"npar\": \"\\u2226\", \"nparsl\": \"\\u2AFD\\u20E5\", \"npart\": \"\\u2202\\u0338\", \"npolint\": \"\\u2A14\", \"npr\": \"\\u2280\", \"nprcue\": \"\\u22E0\", \"nprec\": \"\\u2280\", \"npreceq\": \"\\u2AAF\\u0338\", \"npre\": \"\\u2AAF\\u0338\", \"nrarrc\": \"\\u2933\\u0338\", \"nrarr\": \"\\u219B\", \"nrArr\": \"\\u21CF\", \"nrarrw\": \"\\u219D\\u0338\", \"nrightarrow\": \"\\u219B\", \"nRightarrow\": \"\\u21CF\", \"nrtri\": \"\\u22EB\", \"nrtrie\": \"\\u22ED\", \"nsc\": \"\\u2281\", \"nsccue\": \"\\u22E1\", \"nsce\": \"\\u2AB0\\u0338\", \"Nscr\": \"\\uD835\\uDCA9\", \"nscr\": \"\\uD835\\uDCC3\", \"nshortmid\": \"\\u2224\", \"nshortparallel\": \"\\u2226\", \"nsim\": \"\\u2241\", \"nsime\": \"\\u2244\", \"nsimeq\": \"\\u2244\", \"nsmid\": \"\\u2224\", \"nspar\": \"\\u2226\", \"nsqsube\": \"\\u22E2\", \"nsqsupe\": \"\\u22E3\", \"nsub\": \"\\u2284\", \"nsubE\": \"\\u2AC5\\u0338\", \"nsube\": \"\\u2288\", \"nsubset\": \"\\u2282\\u20D2\", \"nsubseteq\": \"\\u2288\", \"nsubseteqq\": \"\\u2AC5\\u0338\", \"nsucc\": \"\\u2281\", \"nsucceq\": \"\\u2AB0\\u0338\", \"nsup\": \"\\u2285\", \"nsupE\": \"\\u2AC6\\u0338\", \"nsupe\": \"\\u2289\", \"nsupset\": \"\\u2283\\u20D2\", \"nsupseteq\": \"\\u2289\", \"nsupseteqq\": \"\\u2AC6\\u0338\", \"ntgl\": \"\\u2279\", \"Ntilde\": \"\\u00D1\", \"ntilde\": \"\\u00F1\", \"ntlg\": \"\\u2278\", \"ntriangleleft\": \"\\u22EA\", \"ntrianglelefteq\": \"\\u22EC\", \"ntriangleright\": \"\\u22EB\", \"ntrianglerighteq\": \"\\u22ED\", \"Nu\": \"\\u039D\", \"nu\": \"\\u03BD\", \"num\": \"#\", \"numero\": \"\\u2116\", \"numsp\": \"\\u2007\", \"nvap\": \"\\u224D\\u20D2\", \"nvdash\": \"\\u22AC\", \"nvDash\": \"\\u22AD\", \"nVdash\": \"\\u22AE\", \"nVDash\": \"\\u22AF\", \"nvge\": \"\\u2265\\u20D2\", \"nvgt\": \">\\u20D2\", \"nvHarr\": \"\\u2904\", \"nvinfin\": \"\\u29DE\", \"nvlArr\": \"\\u2902\", \"nvle\": \"\\u2264\\u20D2\", \"nvlt\": \"<\\u20D2\", \"nvltrie\": \"\\u22B4\\u20D2\", \"nvrArr\": \"\\u2903\", \"nvrtrie\": \"\\u22B5\\u20D2\", \"nvsim\": \"\\u223C\\u20D2\", \"nwarhk\": \"\\u2923\", \"nwarr\": \"\\u2196\", \"nwArr\": \"\\u21D6\", \"nwarrow\": \"\\u2196\", \"nwnear\": \"\\u2927\", \"Oacute\": \"\\u00D3\", \"oacute\": \"\\u00F3\", \"oast\": \"\\u229B\", \"Ocirc\": \"\\u00D4\", \"ocirc\": \"\\u00F4\", \"ocir\": \"\\u229A\", \"Ocy\": \"\\u041E\", \"ocy\": \"\\u043E\", \"odash\": \"\\u229D\", \"Odblac\": \"\\u0150\", \"odblac\": \"\\u0151\", \"odiv\": \"\\u2A38\", \"odot\": \"\\u2299\", \"odsold\": \"\\u29BC\", \"OElig\": \"\\u0152\", \"oelig\": \"\\u0153\", \"ofcir\": \"\\u29BF\", \"Ofr\": \"\\uD835\\uDD12\", \"ofr\": \"\\uD835\\uDD2C\", \"ogon\": \"\\u02DB\", \"Ograve\": \"\\u00D2\", \"ograve\": \"\\u00F2\", \"ogt\": \"\\u29C1\", \"ohbar\": \"\\u29B5\", \"ohm\": \"\\u03A9\", \"oint\": \"\\u222E\", \"olarr\": \"\\u21BA\", \"olcir\": \"\\u29BE\", \"olcross\": \"\\u29BB\", \"oline\": \"\\u203E\", \"olt\": \"\\u29C0\", \"Omacr\": \"\\u014C\", \"omacr\": \"\\u014D\", \"Omega\": \"\\u03A9\", \"omega\": \"\\u03C9\", \"Omicron\": \"\\u039F\", \"omicron\": \"\\u03BF\", \"omid\": \"\\u29B6\", \"ominus\": \"\\u2296\", \"Oopf\": \"\\uD835\\uDD46\", \"oopf\": \"\\uD835\\uDD60\", \"opar\": \"\\u29B7\", \"OpenCurlyDoubleQuote\": \"\\u201C\", \"OpenCurlyQuote\": \"\\u2018\", \"operp\": \"\\u29B9\", \"oplus\": \"\\u2295\", \"orarr\": \"\\u21BB\", \"Or\": \"\\u2A54\", \"or\": \"\\u2228\", \"ord\": \"\\u2A5D\", \"order\": \"\\u2134\", \"orderof\": \"\\u2134\", \"ordf\": \"\\u00AA\", \"ordm\": \"\\u00BA\", \"origof\": \"\\u22B6\", \"oror\": \"\\u2A56\", \"orslope\": \"\\u2A57\", \"orv\": \"\\u2A5B\", \"oS\": \"\\u24C8\", \"Oscr\": \"\\uD835\\uDCAA\", \"oscr\": \"\\u2134\", \"Oslash\": \"\\u00D8\", \"oslash\": \"\\u00F8\", \"osol\": \"\\u2298\", \"Otilde\": \"\\u00D5\", \"otilde\": \"\\u00F5\", \"otimesas\": \"\\u2A36\", \"Otimes\": \"\\u2A37\", \"otimes\": \"\\u2297\", \"Ouml\": \"\\u00D6\", \"ouml\": \"\\u00F6\", \"ovbar\": \"\\u233D\", \"OverBar\": \"\\u203E\", \"OverBrace\": \"\\u23DE\", \"OverBracket\": \"\\u23B4\", \"OverParenthesis\": \"\\u23DC\", \"para\": \"\\u00B6\", \"parallel\": \"\\u2225\", \"par\": \"\\u2225\", \"parsim\": \"\\u2AF3\", \"parsl\": \"\\u2AFD\", \"part\": \"\\u2202\", \"PartialD\": \"\\u2202\", \"Pcy\": \"\\u041F\", \"pcy\": \"\\u043F\", \"percnt\": \"%\", \"period\": \".\", \"permil\": \"\\u2030\", \"perp\": \"\\u22A5\", \"pertenk\": \"\\u2031\", \"Pfr\": \"\\uD835\\uDD13\", \"pfr\": \"\\uD835\\uDD2D\", \"Phi\": \"\\u03A6\", \"phi\": \"\\u03C6\", \"phiv\": \"\\u03D5\", \"phmmat\": \"\\u2133\", \"phone\": \"\\u260E\", \"Pi\": \"\\u03A0\", \"pi\": \"\\u03C0\", \"pitchfork\": \"\\u22D4\", \"piv\": \"\\u03D6\", \"planck\": \"\\u210F\", \"planckh\": \"\\u210E\", \"plankv\": \"\\u210F\", \"plusacir\": \"\\u2A23\", \"plusb\": \"\\u229E\", \"pluscir\": \"\\u2A22\", \"plus\": \"+\", \"plusdo\": \"\\u2214\", \"plusdu\": \"\\u2A25\", \"pluse\": \"\\u2A72\", \"PlusMinus\": \"\\u00B1\", \"plusmn\": \"\\u00B1\", \"plussim\": \"\\u2A26\", \"plustwo\": \"\\u2A27\", \"pm\": \"\\u00B1\", \"Poincareplane\": \"\\u210C\", \"pointint\": \"\\u2A15\", \"popf\": \"\\uD835\\uDD61\", \"Popf\": \"\\u2119\", \"pound\": \"\\u00A3\", \"prap\": \"\\u2AB7\", \"Pr\": \"\\u2ABB\", \"pr\": \"\\u227A\", \"prcue\": \"\\u227C\", \"precapprox\": \"\\u2AB7\", \"prec\": \"\\u227A\", \"preccurlyeq\": \"\\u227C\", \"Precedes\": \"\\u227A\", \"PrecedesEqual\": \"\\u2AAF\", \"PrecedesSlantEqual\": \"\\u227C\", \"PrecedesTilde\": \"\\u227E\", \"preceq\": \"\\u2AAF\", \"precnapprox\": \"\\u2AB9\", \"precneqq\": \"\\u2AB5\", \"precnsim\": \"\\u22E8\", \"pre\": \"\\u2AAF\", \"prE\": \"\\u2AB3\", \"precsim\": \"\\u227E\", \"prime\": \"\\u2032\", \"Prime\": \"\\u2033\", \"primes\": \"\\u2119\", \"prnap\": \"\\u2AB9\", \"prnE\": \"\\u2AB5\", \"prnsim\": \"\\u22E8\", \"prod\": \"\\u220F\", \"Product\": \"\\u220F\", \"profalar\": \"\\u232E\", \"profline\": \"\\u2312\", \"profsurf\": \"\\u2313\", \"prop\": \"\\u221D\", \"Proportional\": \"\\u221D\", \"Proportion\": \"\\u2237\", \"propto\": \"\\u221D\", \"prsim\": \"\\u227E\", \"prurel\": \"\\u22B0\", \"Pscr\": \"\\uD835\\uDCAB\", \"pscr\": \"\\uD835\\uDCC5\", \"Psi\": \"\\u03A8\", \"psi\": \"\\u03C8\", \"puncsp\": \"\\u2008\", \"Qfr\": \"\\uD835\\uDD14\", \"qfr\": \"\\uD835\\uDD2E\", \"qint\": \"\\u2A0C\", \"qopf\": \"\\uD835\\uDD62\", \"Qopf\": \"\\u211A\", \"qprime\": \"\\u2057\", \"Qscr\": \"\\uD835\\uDCAC\", \"qscr\": \"\\uD835\\uDCC6\", \"quaternions\": \"\\u210D\", \"quatint\": \"\\u2A16\", \"quest\": \"?\", \"questeq\": \"\\u225F\", \"quot\": \"\\\"\", \"QUOT\": \"\\\"\", \"rAarr\": \"\\u21DB\", \"race\": \"\\u223D\\u0331\", \"Racute\": \"\\u0154\", \"racute\": \"\\u0155\", \"radic\": \"\\u221A\", \"raemptyv\": \"\\u29B3\", \"rang\": \"\\u27E9\", \"Rang\": \"\\u27EB\", \"rangd\": \"\\u2992\", \"range\": \"\\u29A5\", \"rangle\": \"\\u27E9\", \"raquo\": \"\\u00BB\", \"rarrap\": \"\\u2975\", \"rarrb\": \"\\u21E5\", \"rarrbfs\": \"\\u2920\", \"rarrc\": \"\\u2933\", \"rarr\": \"\\u2192\", \"Rarr\": \"\\u21A0\", \"rArr\": \"\\u21D2\", \"rarrfs\": \"\\u291E\", \"rarrhk\": \"\\u21AA\", \"rarrlp\": \"\\u21AC\", \"rarrpl\": \"\\u2945\", \"rarrsim\": \"\\u2974\", \"Rarrtl\": \"\\u2916\", \"rarrtl\": \"\\u21A3\", \"rarrw\": \"\\u219D\", \"ratail\": \"\\u291A\", \"rAtail\": \"\\u291C\", \"ratio\": \"\\u2236\", \"rationals\": \"\\u211A\", \"rbarr\": \"\\u290D\", \"rBarr\": \"\\u290F\", \"RBarr\": \"\\u2910\", \"rbbrk\": \"\\u2773\", \"rbrace\": \"}\", \"rbrack\": \"]\", \"rbrke\": \"\\u298C\", \"rbrksld\": \"\\u298E\", \"rbrkslu\": \"\\u2990\", \"Rcaron\": \"\\u0158\", \"rcaron\": \"\\u0159\", \"Rcedil\": \"\\u0156\", \"rcedil\": \"\\u0157\", \"rceil\": \"\\u2309\", \"rcub\": \"}\", \"Rcy\": \"\\u0420\", \"rcy\": \"\\u0440\", \"rdca\": \"\\u2937\", \"rdldhar\": \"\\u2969\", \"rdquo\": \"\\u201D\", \"rdquor\": \"\\u201D\", \"rdsh\": \"\\u21B3\", \"real\": \"\\u211C\", \"realine\": \"\\u211B\", \"realpart\": \"\\u211C\", \"reals\": \"\\u211D\", \"Re\": \"\\u211C\", \"rect\": \"\\u25AD\", \"reg\": \"\\u00AE\", \"REG\": \"\\u00AE\", \"ReverseElement\": \"\\u220B\", \"ReverseEquilibrium\": \"\\u21CB\", \"ReverseUpEquilibrium\": \"\\u296F\", \"rfisht\": \"\\u297D\", \"rfloor\": \"\\u230B\", \"rfr\": \"\\uD835\\uDD2F\", \"Rfr\": \"\\u211C\", \"rHar\": \"\\u2964\", \"rhard\": \"\\u21C1\", \"rharu\": \"\\u21C0\", \"rharul\": \"\\u296C\", \"Rho\": \"\\u03A1\", \"rho\": \"\\u03C1\", \"rhov\": \"\\u03F1\", \"RightAngleBracket\": \"\\u27E9\", \"RightArrowBar\": \"\\u21E5\", \"rightarrow\": \"\\u2192\", \"RightArrow\": \"\\u2192\", \"Rightarrow\": \"\\u21D2\", \"RightArrowLeftArrow\": \"\\u21C4\", \"rightarrowtail\": \"\\u21A3\", \"RightCeiling\": \"\\u2309\", \"RightDoubleBracket\": \"\\u27E7\", \"RightDownTeeVector\": \"\\u295D\", \"RightDownVectorBar\": \"\\u2955\", \"RightDownVector\": \"\\u21C2\", \"RightFloor\": \"\\u230B\", \"rightharpoondown\": \"\\u21C1\", \"rightharpoonup\": \"\\u21C0\", \"rightleftarrows\": \"\\u21C4\", \"rightleftharpoons\": \"\\u21CC\", \"rightrightarrows\": \"\\u21C9\", \"rightsquigarrow\": \"\\u219D\", \"RightTeeArrow\": \"\\u21A6\", \"RightTee\": \"\\u22A2\", \"RightTeeVector\": \"\\u295B\", \"rightthreetimes\": \"\\u22CC\", \"RightTriangleBar\": \"\\u29D0\", \"RightTriangle\": \"\\u22B3\", \"RightTriangleEqual\": \"\\u22B5\", \"RightUpDownVector\": \"\\u294F\", \"RightUpTeeVector\": \"\\u295C\", \"RightUpVectorBar\": \"\\u2954\", \"RightUpVector\": \"\\u21BE\", \"RightVectorBar\": \"\\u2953\", \"RightVector\": \"\\u21C0\", \"ring\": \"\\u02DA\", \"risingdotseq\": \"\\u2253\", \"rlarr\": \"\\u21C4\", \"rlhar\": \"\\u21CC\", \"rlm\": \"\\u200F\", \"rmoustache\": \"\\u23B1\", \"rmoust\": \"\\u23B1\", \"rnmid\": \"\\u2AEE\", \"roang\": \"\\u27ED\", \"roarr\": \"\\u21FE\", \"robrk\": \"\\u27E7\", \"ropar\": \"\\u2986\", \"ropf\": \"\\uD835\\uDD63\", \"Ropf\": \"\\u211D\", \"roplus\": \"\\u2A2E\", \"rotimes\": \"\\u2A35\", \"RoundImplies\": \"\\u2970\", \"rpar\": \")\", \"rpargt\": \"\\u2994\", \"rppolint\": \"\\u2A12\", \"rrarr\": \"\\u21C9\", \"Rrightarrow\": \"\\u21DB\", \"rsaquo\": \"\\u203A\", \"rscr\": \"\\uD835\\uDCC7\", \"Rscr\": \"\\u211B\", \"rsh\": \"\\u21B1\", \"Rsh\": \"\\u21B1\", \"rsqb\": \"]\", \"rsquo\": \"\\u2019\", \"rsquor\": \"\\u2019\", \"rthree\": \"\\u22CC\", \"rtimes\": \"\\u22CA\", \"rtri\": \"\\u25B9\", \"rtrie\": \"\\u22B5\", \"rtrif\": \"\\u25B8\", \"rtriltri\": \"\\u29CE\", \"RuleDelayed\": \"\\u29F4\", \"ruluhar\": \"\\u2968\", \"rx\": \"\\u211E\", \"Sacute\": \"\\u015A\", \"sacute\": \"\\u015B\", \"sbquo\": \"\\u201A\", \"scap\": \"\\u2AB8\", \"Scaron\": \"\\u0160\", \"scaron\": \"\\u0161\", \"Sc\": \"\\u2ABC\", \"sc\": \"\\u227B\", \"sccue\": \"\\u227D\", \"sce\": \"\\u2AB0\", \"scE\": \"\\u2AB4\", \"Scedil\": \"\\u015E\", \"scedil\": \"\\u015F\", \"Scirc\": \"\\u015C\", \"scirc\": \"\\u015D\", \"scnap\": \"\\u2ABA\", \"scnE\": \"\\u2AB6\", \"scnsim\": \"\\u22E9\", \"scpolint\": \"\\u2A13\", \"scsim\": \"\\u227F\", \"Scy\": \"\\u0421\", \"scy\": \"\\u0441\", \"sdotb\": \"\\u22A1\", \"sdot\": \"\\u22C5\", \"sdote\": \"\\u2A66\", \"searhk\": \"\\u2925\", \"searr\": \"\\u2198\", \"seArr\": \"\\u21D8\", \"searrow\": \"\\u2198\", \"sect\": \"\\u00A7\", \"semi\": \";\", \"seswar\": \"\\u2929\", \"setminus\": \"\\u2216\", \"setmn\": \"\\u2216\", \"sext\": \"\\u2736\", \"Sfr\": \"\\uD835\\uDD16\", \"sfr\": \"\\uD835\\uDD30\", \"sfrown\": \"\\u2322\", \"sharp\": \"\\u266F\", \"SHCHcy\": \"\\u0429\", \"shchcy\": \"\\u0449\", \"SHcy\": \"\\u0428\", \"shcy\": \"\\u0448\", \"ShortDownArrow\": \"\\u2193\", \"ShortLeftArrow\": \"\\u2190\", \"shortmid\": \"\\u2223\", \"shortparallel\": \"\\u2225\", \"ShortRightArrow\": \"\\u2192\", \"ShortUpArrow\": \"\\u2191\", \"shy\": \"\\u00AD\", \"Sigma\": \"\\u03A3\", \"sigma\": \"\\u03C3\", \"sigmaf\": \"\\u03C2\", \"sigmav\": \"\\u03C2\", \"sim\": \"\\u223C\", \"simdot\": \"\\u2A6A\", \"sime\": \"\\u2243\", \"simeq\": \"\\u2243\", \"simg\": \"\\u2A9E\", \"simgE\": \"\\u2AA0\", \"siml\": \"\\u2A9D\", \"simlE\": \"\\u2A9F\", \"simne\": \"\\u2246\", \"simplus\": \"\\u2A24\", \"simrarr\": \"\\u2972\", \"slarr\": \"\\u2190\", \"SmallCircle\": \"\\u2218\", \"smallsetminus\": \"\\u2216\", \"smashp\": \"\\u2A33\", \"smeparsl\": \"\\u29E4\", \"smid\": \"\\u2223\", \"smile\": \"\\u2323\", \"smt\": \"\\u2AAA\", \"smte\": \"\\u2AAC\", \"smtes\": \"\\u2AAC\\uFE00\", \"SOFTcy\": \"\\u042C\", \"softcy\": \"\\u044C\", \"solbar\": \"\\u233F\", \"solb\": \"\\u29C4\", \"sol\": \"/\", \"Sopf\": \"\\uD835\\uDD4A\", \"sopf\": \"\\uD835\\uDD64\", \"spades\": \"\\u2660\", \"spadesuit\": \"\\u2660\", \"spar\": \"\\u2225\", \"sqcap\": \"\\u2293\", \"sqcaps\": \"\\u2293\\uFE00\", \"sqcup\": \"\\u2294\", \"sqcups\": \"\\u2294\\uFE00\", \"Sqrt\": \"\\u221A\", \"sqsub\": \"\\u228F\", \"sqsube\": \"\\u2291\", \"sqsubset\": \"\\u228F\", \"sqsubseteq\": \"\\u2291\", \"sqsup\": \"\\u2290\", \"sqsupe\": \"\\u2292\", \"sqsupset\": \"\\u2290\", \"sqsupseteq\": \"\\u2292\", \"square\": \"\\u25A1\", \"Square\": \"\\u25A1\", \"SquareIntersection\": \"\\u2293\", \"SquareSubset\": \"\\u228F\", \"SquareSubsetEqual\": \"\\u2291\", \"SquareSuperset\": \"\\u2290\", \"SquareSupersetEqual\": \"\\u2292\", \"SquareUnion\": \"\\u2294\", \"squarf\": \"\\u25AA\", \"squ\": \"\\u25A1\", \"squf\": \"\\u25AA\", \"srarr\": \"\\u2192\", \"Sscr\": \"\\uD835\\uDCAE\", \"sscr\": \"\\uD835\\uDCC8\", \"ssetmn\": \"\\u2216\", \"ssmile\": \"\\u2323\", \"sstarf\": \"\\u22C6\", \"Star\": \"\\u22C6\", \"star\": \"\\u2606\", \"starf\": \"\\u2605\", \"straightepsilon\": \"\\u03F5\", \"straightphi\": \"\\u03D5\", \"strns\": \"\\u00AF\", \"sub\": \"\\u2282\", \"Sub\": \"\\u22D0\", \"subdot\": \"\\u2ABD\", \"subE\": \"\\u2AC5\", \"sube\": \"\\u2286\", \"subedot\": \"\\u2AC3\", \"submult\": \"\\u2AC1\", \"subnE\": \"\\u2ACB\", \"subne\": \"\\u228A\", \"subplus\": \"\\u2ABF\", \"subrarr\": \"\\u2979\", \"subset\": \"\\u2282\", \"Subset\": \"\\u22D0\", \"subseteq\": \"\\u2286\", \"subseteqq\": \"\\u2AC5\", \"SubsetEqual\": \"\\u2286\", \"subsetneq\": \"\\u228A\", \"subsetneqq\": \"\\u2ACB\", \"subsim\": \"\\u2AC7\", \"subsub\": \"\\u2AD5\", \"subsup\": \"\\u2AD3\", \"succapprox\": \"\\u2AB8\", \"succ\": \"\\u227B\", \"succcurlyeq\": \"\\u227D\", \"Succeeds\": \"\\u227B\", \"SucceedsEqual\": \"\\u2AB0\", \"SucceedsSlantEqual\": \"\\u227D\", \"SucceedsTilde\": \"\\u227F\", \"succeq\": \"\\u2AB0\", \"succnapprox\": \"\\u2ABA\", \"succneqq\": \"\\u2AB6\", \"succnsim\": \"\\u22E9\", \"succsim\": \"\\u227F\", \"SuchThat\": \"\\u220B\", \"sum\": \"\\u2211\", \"Sum\": \"\\u2211\", \"sung\": \"\\u266A\", \"sup1\": \"\\u00B9\", \"sup2\": \"\\u00B2\", \"sup3\": \"\\u00B3\", \"sup\": \"\\u2283\", \"Sup\": \"\\u22D1\", \"supdot\": \"\\u2ABE\", \"supdsub\": \"\\u2AD8\", \"supE\": \"\\u2AC6\", \"supe\": \"\\u2287\", \"supedot\": \"\\u2AC4\", \"Superset\": \"\\u2283\", \"SupersetEqual\": \"\\u2287\", \"suphsol\": \"\\u27C9\", \"suphsub\": \"\\u2AD7\", \"suplarr\": \"\\u297B\", \"supmult\": \"\\u2AC2\", \"supnE\": \"\\u2ACC\", \"supne\": \"\\u228B\", \"supplus\": \"\\u2AC0\", \"supset\": \"\\u2283\", \"Supset\": \"\\u22D1\", \"supseteq\": \"\\u2287\", \"supseteqq\": \"\\u2AC6\", \"supsetneq\": \"\\u228B\", \"supsetneqq\": \"\\u2ACC\", \"supsim\": \"\\u2AC8\", \"supsub\": \"\\u2AD4\", \"supsup\": \"\\u2AD6\", \"swarhk\": \"\\u2926\", \"swarr\": \"\\u2199\", \"swArr\": \"\\u21D9\", \"swarrow\": \"\\u2199\", \"swnwar\": \"\\u292A\", \"szlig\": \"\\u00DF\", \"Tab\": \"\\t\", \"target\": \"\\u2316\", \"Tau\": \"\\u03A4\", \"tau\": \"\\u03C4\", \"tbrk\": \"\\u23B4\", \"Tcaron\": \"\\u0164\", \"tcaron\": \"\\u0165\", \"Tcedil\": \"\\u0162\", \"tcedil\": \"\\u0163\", \"Tcy\": \"\\u0422\", \"tcy\": \"\\u0442\", \"tdot\": \"\\u20DB\", \"telrec\": \"\\u2315\", \"Tfr\": \"\\uD835\\uDD17\", \"tfr\": \"\\uD835\\uDD31\", \"there4\": \"\\u2234\", \"therefore\": \"\\u2234\", \"Therefore\": \"\\u2234\", \"Theta\": \"\\u0398\", \"theta\": \"\\u03B8\", \"thetasym\": \"\\u03D1\", \"thetav\": \"\\u03D1\", \"thickapprox\": \"\\u2248\", \"thicksim\": \"\\u223C\", \"ThickSpace\": \"\\u205F\\u200A\", \"ThinSpace\": \"\\u2009\", \"thinsp\": \"\\u2009\", \"thkap\": \"\\u2248\", \"thksim\": \"\\u223C\", \"THORN\": \"\\u00DE\", \"thorn\": \"\\u00FE\", \"tilde\": \"\\u02DC\", \"Tilde\": \"\\u223C\", \"TildeEqual\": \"\\u2243\", \"TildeFullEqual\": \"\\u2245\", \"TildeTilde\": \"\\u2248\", \"timesbar\": \"\\u2A31\", \"timesb\": \"\\u22A0\", \"times\": \"\\u00D7\", \"timesd\": \"\\u2A30\", \"tint\": \"\\u222D\", \"toea\": \"\\u2928\", \"topbot\": \"\\u2336\", \"topcir\": \"\\u2AF1\", \"top\": \"\\u22A4\", \"Topf\": \"\\uD835\\uDD4B\", \"topf\": \"\\uD835\\uDD65\", \"topfork\": \"\\u2ADA\", \"tosa\": \"\\u2929\", \"tprime\": \"\\u2034\", \"trade\": \"\\u2122\", \"TRADE\": \"\\u2122\", \"triangle\": \"\\u25B5\", \"triangledown\": \"\\u25BF\", \"triangleleft\": \"\\u25C3\", \"trianglelefteq\": \"\\u22B4\", \"triangleq\": \"\\u225C\", \"triangleright\": \"\\u25B9\", \"trianglerighteq\": \"\\u22B5\", \"tridot\": \"\\u25EC\", \"trie\": \"\\u225C\", \"triminus\": \"\\u2A3A\", \"TripleDot\": \"\\u20DB\", \"triplus\": \"\\u2A39\", \"trisb\": \"\\u29CD\", \"tritime\": \"\\u2A3B\", \"trpezium\": \"\\u23E2\", \"Tscr\": \"\\uD835\\uDCAF\", \"tscr\": \"\\uD835\\uDCC9\", \"TScy\": \"\\u0426\", \"tscy\": \"\\u0446\", \"TSHcy\": \"\\u040B\", \"tshcy\": \"\\u045B\", \"Tstrok\": \"\\u0166\", \"tstrok\": \"\\u0167\", \"twixt\": \"\\u226C\", \"twoheadleftarrow\": \"\\u219E\", \"twoheadrightarrow\": \"\\u21A0\", \"Uacute\": \"\\u00DA\", \"uacute\": \"\\u00FA\", \"uarr\": \"\\u2191\", \"Uarr\": \"\\u219F\", \"uArr\": \"\\u21D1\", \"Uarrocir\": \"\\u2949\", \"Ubrcy\": \"\\u040E\", \"ubrcy\": \"\\u045E\", \"Ubreve\": \"\\u016C\", \"ubreve\": \"\\u016D\", \"Ucirc\": \"\\u00DB\", \"ucirc\": \"\\u00FB\", \"Ucy\": \"\\u0423\", \"ucy\": \"\\u0443\", \"udarr\": \"\\u21C5\", \"Udblac\": \"\\u0170\", \"udblac\": \"\\u0171\", \"udhar\": \"\\u296E\", \"ufisht\": \"\\u297E\", \"Ufr\": \"\\uD835\\uDD18\", \"ufr\": \"\\uD835\\uDD32\", \"Ugrave\": \"\\u00D9\", \"ugrave\": \"\\u00F9\", \"uHar\": \"\\u2963\", \"uharl\": \"\\u21BF\", \"uharr\": \"\\u21BE\", \"uhblk\": \"\\u2580\", \"ulcorn\": \"\\u231C\", \"ulcorner\": \"\\u231C\", \"ulcrop\": \"\\u230F\", \"ultri\": \"\\u25F8\", \"Umacr\": \"\\u016A\", \"umacr\": \"\\u016B\", \"uml\": \"\\u00A8\", \"UnderBar\": \"_\", \"UnderBrace\": \"\\u23DF\", \"UnderBracket\": \"\\u23B5\", \"UnderParenthesis\": \"\\u23DD\", \"Union\": \"\\u22C3\", \"UnionPlus\": \"\\u228E\", \"Uogon\": \"\\u0172\", \"uogon\": \"\\u0173\", \"Uopf\": \"\\uD835\\uDD4C\", \"uopf\": \"\\uD835\\uDD66\", \"UpArrowBar\": \"\\u2912\", \"uparrow\": \"\\u2191\", \"UpArrow\": \"\\u2191\", \"Uparrow\": \"\\u21D1\", \"UpArrowDownArrow\": \"\\u21C5\", \"updownarrow\": \"\\u2195\", \"UpDownArrow\": \"\\u2195\", \"Updownarrow\": \"\\u21D5\", \"UpEquilibrium\": \"\\u296E\", \"upharpoonleft\": \"\\u21BF\", \"upharpoonright\": \"\\u21BE\", \"uplus\": \"\\u228E\", \"UpperLeftArrow\": \"\\u2196\", \"UpperRightArrow\": \"\\u2197\", \"upsi\": \"\\u03C5\", \"Upsi\": \"\\u03D2\", \"upsih\": \"\\u03D2\", \"Upsilon\": \"\\u03A5\", \"upsilon\": \"\\u03C5\", \"UpTeeArrow\": \"\\u21A5\", \"UpTee\": \"\\u22A5\", \"upuparrows\": \"\\u21C8\", \"urcorn\": \"\\u231D\", \"urcorner\": \"\\u231D\", \"urcrop\": \"\\u230E\", \"Uring\": \"\\u016E\", \"uring\": \"\\u016F\", \"urtri\": \"\\u25F9\", \"Uscr\": \"\\uD835\\uDCB0\", \"uscr\": \"\\uD835\\uDCCA\", \"utdot\": \"\\u22F0\", \"Utilde\": \"\\u0168\", \"utilde\": \"\\u0169\", \"utri\": \"\\u25B5\", \"utrif\": \"\\u25B4\", \"uuarr\": \"\\u21C8\", \"Uuml\": \"\\u00DC\", \"uuml\": \"\\u00FC\", \"uwangle\": \"\\u29A7\", \"vangrt\": \"\\u299C\", \"varepsilon\": \"\\u03F5\", \"varkappa\": \"\\u03F0\", \"varnothing\": \"\\u2205\", \"varphi\": \"\\u03D5\", \"varpi\": \"\\u03D6\", \"varpropto\": \"\\u221D\", \"varr\": \"\\u2195\", \"vArr\": \"\\u21D5\", \"varrho\": \"\\u03F1\", \"varsigma\": \"\\u03C2\", \"varsubsetneq\": \"\\u228A\\uFE00\", \"varsubsetneqq\": \"\\u2ACB\\uFE00\", \"varsupsetneq\": \"\\u228B\\uFE00\", \"varsupsetneqq\": \"\\u2ACC\\uFE00\", \"vartheta\": \"\\u03D1\", \"vartriangleleft\": \"\\u22B2\", \"vartriangleright\": \"\\u22B3\", \"vBar\": \"\\u2AE8\", \"Vbar\": \"\\u2AEB\", \"vBarv\": \"\\u2AE9\", \"Vcy\": \"\\u0412\", \"vcy\": \"\\u0432\", \"vdash\": \"\\u22A2\", \"vDash\": \"\\u22A8\", \"Vdash\": \"\\u22A9\", \"VDash\": \"\\u22AB\", \"Vdashl\": \"\\u2AE6\", \"veebar\": \"\\u22BB\", \"vee\": \"\\u2228\", \"Vee\": \"\\u22C1\", \"veeeq\": \"\\u225A\", \"vellip\": \"\\u22EE\", \"verbar\": \"|\", \"Verbar\": \"\\u2016\", \"vert\": \"|\", \"Vert\": \"\\u2016\", \"VerticalBar\": \"\\u2223\", \"VerticalLine\": \"|\", \"VerticalSeparator\": \"\\u2758\", \"VerticalTilde\": \"\\u2240\", \"VeryThinSpace\": \"\\u200A\", \"Vfr\": \"\\uD835\\uDD19\", \"vfr\": \"\\uD835\\uDD33\", \"vltri\": \"\\u22B2\", \"vnsub\": \"\\u2282\\u20D2\", \"vnsup\": \"\\u2283\\u20D2\", \"Vopf\": \"\\uD835\\uDD4D\", \"vopf\": \"\\uD835\\uDD67\", \"vprop\": \"\\u221D\", \"vrtri\": \"\\u22B3\", \"Vscr\": \"\\uD835\\uDCB1\", \"vscr\": \"\\uD835\\uDCCB\", \"vsubnE\": \"\\u2ACB\\uFE00\", \"vsubne\": \"\\u228A\\uFE00\", \"vsupnE\": \"\\u2ACC\\uFE00\", \"vsupne\": \"\\u228B\\uFE00\", \"Vvdash\": \"\\u22AA\", \"vzigzag\": \"\\u299A\", \"Wcirc\": \"\\u0174\", \"wcirc\": \"\\u0175\", \"wedbar\": \"\\u2A5F\", \"wedge\": \"\\u2227\", \"Wedge\": \"\\u22C0\", \"wedgeq\": \"\\u2259\", \"weierp\": \"\\u2118\", \"Wfr\": \"\\uD835\\uDD1A\", \"wfr\": \"\\uD835\\uDD34\", \"Wopf\": \"\\uD835\\uDD4E\", \"wopf\": \"\\uD835\\uDD68\", \"wp\": \"\\u2118\", \"wr\": \"\\u2240\", \"wreath\": \"\\u2240\", \"Wscr\": \"\\uD835\\uDCB2\", \"wscr\": \"\\uD835\\uDCCC\", \"xcap\": \"\\u22C2\", \"xcirc\": \"\\u25EF\", \"xcup\": \"\\u22C3\", \"xdtri\": \"\\u25BD\", \"Xfr\": \"\\uD835\\uDD1B\", \"xfr\": \"\\uD835\\uDD35\", \"xharr\": \"\\u27F7\", \"xhArr\": \"\\u27FA\", \"Xi\": \"\\u039E\", \"xi\": \"\\u03BE\", \"xlarr\": \"\\u27F5\", \"xlArr\": \"\\u27F8\", \"xmap\": \"\\u27FC\", \"xnis\": \"\\u22FB\", \"xodot\": \"\\u2A00\", \"Xopf\": \"\\uD835\\uDD4F\", \"xopf\": \"\\uD835\\uDD69\", \"xoplus\": \"\\u2A01\", \"xotime\": \"\\u2A02\", \"xrarr\": \"\\u27F6\", \"xrArr\": \"\\u27F9\", \"Xscr\": \"\\uD835\\uDCB3\", \"xscr\": \"\\uD835\\uDCCD\", \"xsqcup\": \"\\u2A06\", \"xuplus\": \"\\u2A04\", \"xutri\": \"\\u25B3\", \"xvee\": \"\\u22C1\", \"xwedge\": \"\\u22C0\", \"Yacute\": \"\\u00DD\", \"yacute\": \"\\u00FD\", \"YAcy\": \"\\u042F\", \"yacy\": \"\\u044F\", \"Ycirc\": \"\\u0176\", \"ycirc\": \"\\u0177\", \"Ycy\": \"\\u042B\", \"ycy\": \"\\u044B\", \"yen\": \"\\u00A5\", \"Yfr\": \"\\uD835\\uDD1C\", \"yfr\": \"\\uD835\\uDD36\", \"YIcy\": \"\\u0407\", \"yicy\": \"\\u0457\", \"Yopf\": \"\\uD835\\uDD50\", \"yopf\": \"\\uD835\\uDD6A\", \"Yscr\": \"\\uD835\\uDCB4\", \"yscr\": \"\\uD835\\uDCCE\", \"YUcy\": \"\\u042E\", \"yucy\": \"\\u044E\", \"yuml\": \"\\u00FF\", \"Yuml\": \"\\u0178\", \"Zacute\": \"\\u0179\", \"zacute\": \"\\u017A\", \"Zcaron\": \"\\u017D\", \"zcaron\": \"\\u017E\", \"Zcy\": \"\\u0417\", \"zcy\": \"\\u0437\", \"Zdot\": \"\\u017B\", \"zdot\": \"\\u017C\", \"zeetrf\": \"\\u2128\", \"ZeroWidthSpace\": \"\\u200B\", \"Zeta\": \"\\u0396\", \"zeta\": \"\\u03B6\", \"zfr\": \"\\uD835\\uDD37\", \"Zfr\": \"\\u2128\", \"ZHcy\": \"\\u0416\", \"zhcy\": \"\\u0436\", \"zigrarr\": \"\\u21DD\", \"zopf\": \"\\uD835\\uDD6B\", \"Zopf\": \"\\u2124\", \"Zscr\": \"\\uD835\\uDCB5\", \"zscr\": \"\\uD835\\uDCCF\", \"zwj\": \"\\u200D\", \"zwnj\": \"\\u200C\" }\n","{ \"Aacute\": \"\\u00C1\", \"aacute\": \"\\u00E1\", \"Acirc\": \"\\u00C2\", \"acirc\": \"\\u00E2\", \"acute\": \"\\u00B4\", \"AElig\": \"\\u00C6\", \"aelig\": \"\\u00E6\", \"Agrave\": \"\\u00C0\", \"agrave\": \"\\u00E0\", \"amp\": \"&\", \"AMP\": \"&\", \"Aring\": \"\\u00C5\", \"aring\": \"\\u00E5\", \"Atilde\": \"\\u00C3\", \"atilde\": \"\\u00E3\", \"Auml\": \"\\u00C4\", \"auml\": \"\\u00E4\", \"brvbar\": \"\\u00A6\", \"Ccedil\": \"\\u00C7\", \"ccedil\": \"\\u00E7\", \"cedil\": \"\\u00B8\", \"cent\": \"\\u00A2\", \"copy\": \"\\u00A9\", \"COPY\": \"\\u00A9\", \"curren\": \"\\u00A4\", \"deg\": \"\\u00B0\", \"divide\": \"\\u00F7\", \"Eacute\": \"\\u00C9\", \"eacute\": \"\\u00E9\", \"Ecirc\": \"\\u00CA\", \"ecirc\": \"\\u00EA\", \"Egrave\": \"\\u00C8\", \"egrave\": \"\\u00E8\", \"ETH\": \"\\u00D0\", \"eth\": \"\\u00F0\", \"Euml\": \"\\u00CB\", \"euml\": \"\\u00EB\", \"frac12\": \"\\u00BD\", \"frac14\": \"\\u00BC\", \"frac34\": \"\\u00BE\", \"gt\": \">\", \"GT\": \">\", \"Iacute\": \"\\u00CD\", \"iacute\": \"\\u00ED\", \"Icirc\": \"\\u00CE\", \"icirc\": \"\\u00EE\", \"iexcl\": \"\\u00A1\", \"Igrave\": \"\\u00CC\", \"igrave\": \"\\u00EC\", \"iquest\": \"\\u00BF\", \"Iuml\": \"\\u00CF\", \"iuml\": \"\\u00EF\", \"laquo\": \"\\u00AB\", \"lt\": \"<\", \"LT\": \"<\", \"macr\": \"\\u00AF\", \"micro\": \"\\u00B5\", \"middot\": \"\\u00B7\", \"nbsp\": \"\\u00A0\", \"not\": \"\\u00AC\", \"Ntilde\": \"\\u00D1\", \"ntilde\": \"\\u00F1\", \"Oacute\": \"\\u00D3\", \"oacute\": \"\\u00F3\", \"Ocirc\": \"\\u00D4\", \"ocirc\": \"\\u00F4\", \"Ograve\": \"\\u00D2\", \"ograve\": \"\\u00F2\", \"ordf\": \"\\u00AA\", \"ordm\": \"\\u00BA\", \"Oslash\": \"\\u00D8\", \"oslash\": \"\\u00F8\", \"Otilde\": \"\\u00D5\", \"otilde\": \"\\u00F5\", \"Ouml\": \"\\u00D6\", \"ouml\": \"\\u00F6\", \"para\": \"\\u00B6\", \"plusmn\": \"\\u00B1\", \"pound\": \"\\u00A3\", \"quot\": \"\\\"\", \"QUOT\": \"\\\"\", \"raquo\": \"\\u00BB\", \"reg\": \"\\u00AE\", \"REG\": \"\\u00AE\", \"sect\": \"\\u00A7\", \"shy\": \"\\u00AD\", \"sup1\": \"\\u00B9\", \"sup2\": \"\\u00B2\", \"sup3\": \"\\u00B3\", \"szlig\": \"\\u00DF\", \"THORN\": \"\\u00DE\", \"thorn\": \"\\u00FE\", \"times\": \"\\u00D7\", \"Uacute\": \"\\u00DA\", \"uacute\": \"\\u00FA\", \"Ucirc\": \"\\u00DB\", \"ucirc\": \"\\u00FB\", \"Ugrave\": \"\\u00D9\", \"ugrave\": \"\\u00F9\", \"uml\": \"\\u00A8\", \"Uuml\": \"\\u00DC\", \"uuml\": \"\\u00FC\", \"Yacute\": \"\\u00DD\", \"yacute\": \"\\u00FD\", \"yen\": \"\\u00A5\", \"yuml\": \"\\u00FF\" }\n","{ \"amp\": \"&\", \"apos\": \"'\", \"gt\": \">\", \"lt\": \"<\", \"quot\": \"\\\"\" }\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar decode_json_1 = __importDefault(require(\"./maps/decode.json\"));\n// modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119\nfunction decodeCodePoint(codePoint) {\n    if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {\n        return \"\\uFFFD\";\n    }\n    if (codePoint in decode_json_1.default) {\n        codePoint = decode_json_1.default[codePoint];\n    }\n    var output = \"\";\n    if (codePoint > 0xffff) {\n        codePoint -= 0x10000;\n        output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);\n        codePoint = 0xdc00 | (codePoint & 0x3ff);\n    }\n    output += String.fromCharCode(codePoint);\n    return output;\n}\nexports.default = decodeCodePoint;\n","{\n    \"0\": 65533,\n    \"128\": 8364,\n    \"130\": 8218,\n    \"131\": 402,\n    \"132\": 8222,\n    \"133\": 8230,\n    \"134\": 8224,\n    \"135\": 8225,\n    \"136\": 710,\n    \"137\": 8240,\n    \"138\": 352,\n    \"139\": 8249,\n    \"140\": 338,\n    \"142\": 381,\n    \"145\": 8216,\n    \"146\": 8217,\n    \"147\": 8220,\n    \"148\": 8221,\n    \"149\": 8226,\n    \"150\": 8211,\n    \"151\": 8212,\n    \"152\": 732,\n    \"153\": 8482,\n    \"154\": 353,\n    \"155\": 8250,\n    \"156\": 339,\n    \"158\": 382,\n    \"159\": 376\n}\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.escape = exports.encodeHTML = exports.encodeXML = void 0;\nvar xml_json_1 = __importDefault(require(\"./maps/xml.json\"));\nvar inverseXML = getInverseObj(xml_json_1.default);\nvar xmlReplacer = getInverseReplacer(inverseXML);\nexports.encodeXML = getInverse(inverseXML, xmlReplacer);\nvar entities_json_1 = __importDefault(require(\"./maps/entities.json\"));\nvar inverseHTML = getInverseObj(entities_json_1.default);\nvar htmlReplacer = getInverseReplacer(inverseHTML);\nexports.encodeHTML = getInverse(inverseHTML, htmlReplacer);\nfunction getInverseObj(obj) {\n    return Object.keys(obj)\n        .sort()\n        .reduce(function (inverse, name) {\n        inverse[obj[name]] = \"&\" + name + \";\";\n        return inverse;\n    }, {});\n}\nfunction getInverseReplacer(inverse) {\n    var single = [];\n    var multiple = [];\n    for (var _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++) {\n        var k = _a[_i];\n        if (k.length === 1) {\n            // Add value to single array\n            single.push(\"\\\\\" + k);\n        }\n        else {\n            // Add value to multiple array\n            multiple.push(k);\n        }\n    }\n    // Add ranges to single characters.\n    single.sort();\n    for (var start = 0; start < single.length - 1; start++) {\n        // Find the end of a run of characters\n        var end = start;\n        while (end < single.length - 1 &&\n            single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1)) {\n            end += 1;\n        }\n        var count = 1 + end - start;\n        // We want to replace at least three characters\n        if (count < 3)\n            continue;\n        single.splice(start, count, single[start] + \"-\" + single[end]);\n    }\n    multiple.unshift(\"[\" + single.join(\"\") + \"]\");\n    return new RegExp(multiple.join(\"|\"), \"g\");\n}\nvar reNonASCII = /(?:[\\x80-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/g;\nfunction singleCharReplacer(c) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return \"&#x\" + c.codePointAt(0).toString(16).toUpperCase() + \";\";\n}\nfunction getInverse(inverse, re) {\n    return function (data) {\n        return data\n            .replace(re, function (name) { return inverse[name]; })\n            .replace(reNonASCII, singleCharReplacer);\n    };\n}\nvar reXmlChars = getInverseReplacer(inverseXML);\nfunction escape(data) {\n    return data\n        .replace(reXmlChars, singleCharReplacer)\n        .replace(reNonASCII, singleCharReplacer);\n}\nexports.escape = escape;\n","\"use strict\";\n\nimport encode from \"mdurl/encode.js\";\nimport { decodeHTML } from \"entities\";\n\nvar C_BACKSLASH = 92;\n\nvar ENTITY = \"&(?:#x[a-f0-9]{1,6}|#[0-9]{1,7}|[a-z][a-z0-9]{1,31});\";\n\nvar TAGNAME = \"[A-Za-z][A-Za-z0-9-]*\";\nvar ATTRIBUTENAME = \"[a-zA-Z_:][a-zA-Z0-9:._-]*\";\nvar UNQUOTEDVALUE = \"[^\\\"'=<>`\\\\x00-\\\\x20]+\";\nvar SINGLEQUOTEDVALUE = \"'[^']*'\";\nvar DOUBLEQUOTEDVALUE = '\"[^\"]*\"';\nvar ATTRIBUTEVALUE =\n    \"(?:\" +\n    UNQUOTEDVALUE +\n    \"|\" +\n    SINGLEQUOTEDVALUE +\n    \"|\" +\n    DOUBLEQUOTEDVALUE +\n    \")\";\nvar ATTRIBUTEVALUESPEC = \"(?:\" + \"\\\\s*=\" + \"\\\\s*\" + ATTRIBUTEVALUE + \")\";\nvar ATTRIBUTE = \"(?:\" + \"\\\\s+\" + ATTRIBUTENAME + ATTRIBUTEVALUESPEC + \"?)\";\nvar OPENTAG = \"<\" + TAGNAME + ATTRIBUTE + \"*\" + \"\\\\s*/?>\";\nvar CLOSETAG = \"</\" + TAGNAME + \"\\\\s*[>]\";\nvar HTMLCOMMENT = \"<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->\";\nvar PROCESSINGINSTRUCTION = \"[<][?][\\\\s\\\\S]*?[?][>]\";\nvar DECLARATION = \"<![A-Z]+\" + \"\\\\s+[^>]*>\";\nvar CDATA = \"<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\";\nvar HTMLTAG =\n    \"(?:\" +\n    OPENTAG +\n    \"|\" +\n    CLOSETAG +\n    \"|\" +\n    HTMLCOMMENT +\n    \"|\" +\n    PROCESSINGINSTRUCTION +\n    \"|\" +\n    DECLARATION +\n    \"|\" +\n    CDATA +\n    \")\";\nvar reHtmlTag = new RegExp(\"^\" + HTMLTAG);\n\nvar reBackslashOrAmp = /[\\\\&]/;\n\nvar ESCAPABLE = \"[!\\\"#$%&'()*+,./:;<=>?@[\\\\\\\\\\\\]^_`{|}~-]\";\n\nvar reEntityOrEscapedChar = new RegExp(\"\\\\\\\\\" + ESCAPABLE + \"|\" + ENTITY, \"gi\");\n\nvar XMLSPECIAL = '[&<>\"]';\n\nvar reXmlSpecial = new RegExp(XMLSPECIAL, \"g\");\n\nvar unescapeChar = function(s) {\n    if (s.charCodeAt(0) === C_BACKSLASH) {\n        return s.charAt(1);\n    } else {\n        return decodeHTML(s);\n    }\n};\n\n// Replace entities and backslash escapes with literal characters.\nvar unescapeString = function(s) {\n    if (reBackslashOrAmp.test(s)) {\n        return s.replace(reEntityOrEscapedChar, unescapeChar);\n    } else {\n        return s;\n    }\n};\n\nvar normalizeURI = function(uri) {\n    try {\n        return encode(uri);\n    } catch (err) {\n        return uri;\n    }\n};\n\nvar replaceUnsafeChar = function(s) {\n    switch (s) {\n        case \"&\":\n            return \"&amp;\";\n        case \"<\":\n            return \"&lt;\";\n        case \">\":\n            return \"&gt;\";\n        case '\"':\n            return \"&quot;\";\n        default:\n            return s;\n    }\n};\n\nvar escapeXml = function(s) {\n    if (reXmlSpecial.test(s)) {\n        return s.replace(reXmlSpecial, replaceUnsafeChar);\n    } else {\n        return s;\n    }\n};\n\nexport {\n    unescapeString,\n    normalizeURI,\n    escapeXml,\n    reHtmlTag,\n    OPENTAG,\n    CLOSETAG,\n    ENTITY,\n    ESCAPABLE\n};\n","function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","\"use strict\";\n\n// derived from https://github.com/mathiasbynens/String.fromCodePoint\n/*! http://mths.be/fromcodepoint v0.2.1 by @mathias */\n\nvar _fromCodePoint;\n\nexport default function fromCodePoint(_) {\n    return _fromCodePoint(_);\n}\n\nif (String.fromCodePoint) {\n    _fromCodePoint = function(_) {\n        try {\n            return String.fromCodePoint(_);\n        } catch (e) {\n            if (e instanceof RangeError) {\n                return String.fromCharCode(0xfffd);\n            }\n            throw e;\n        }\n    };\n} else {\n    var stringFromCharCode = String.fromCharCode;\n    var floor = Math.floor;\n    _fromCodePoint = function() {\n        var MAX_SIZE = 0x4000;\n        var codeUnits = [];\n        var highSurrogate;\n        var lowSurrogate;\n        var index = -1;\n        var length = arguments.length;\n        if (!length) {\n            return \"\";\n        }\n        var result = \"\";\n        while (++index < length) {\n            var codePoint = Number(arguments[index]);\n            if (\n                !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n                codePoint < 0 || // not a valid Unicode code point\n                codePoint > 0x10ffff || // not a valid Unicode code point\n                floor(codePoint) !== codePoint // not an integer\n            ) {\n                return String.fromCharCode(0xfffd);\n            }\n            if (codePoint <= 0xffff) {\n                // BMP code point\n                codeUnits.push(codePoint);\n            } else {\n                // Astral code point; split in surrogate halves\n                // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n                codePoint -= 0x10000;\n                highSurrogate = (codePoint >> 10) + 0xd800;\n                lowSurrogate = (codePoint % 0x400) + 0xdc00;\n                codeUnits.push(highSurrogate, lowSurrogate);\n            }\n            if (index + 1 === length || codeUnits.length > MAX_SIZE) {\n                result += stringFromCharCode.apply(null, codeUnits);\n                codeUnits.length = 0;\n            }\n        }\n        return result;\n    };\n}\n","/*! http://mths.be/repeat v0.2.0 by @mathias */\nif (!String.prototype.repeat) {\n\t(function() {\n\t\t'use strict'; // needed to support `apply`/`call` with `undefined`/`null`\n\t\tvar defineProperty = (function() {\n\t\t\t// IE 8 only supports `Object.defineProperty` on DOM elements\n\t\t\ttry {\n\t\t\t\tvar object = {};\n\t\t\t\tvar $defineProperty = Object.defineProperty;\n\t\t\t\tvar result = $defineProperty(object, object, object) && $defineProperty;\n\t\t\t} catch(error) {}\n\t\t\treturn result;\n\t\t}());\n\t\tvar repeat = function(count) {\n\t\t\tif (this == null) {\n\t\t\t\tthrow TypeError();\n\t\t\t}\n\t\t\tvar string = String(this);\n\t\t\t// `ToInteger`\n\t\t\tvar n = count ? Number(count) : 0;\n\t\t\tif (n != n) { // better `isNaN`\n\t\t\t\tn = 0;\n\t\t\t}\n\t\t\t// Account for out-of-bounds indices\n\t\t\tif (n < 0 || n == Infinity) {\n\t\t\t\tthrow RangeError();\n\t\t\t}\n\t\t\tvar result = '';\n\t\t\twhile (n) {\n\t\t\t\tif (n % 2 == 1) {\n\t\t\t\t\tresult += string;\n\t\t\t\t}\n\t\t\t\tif (n > 1) {\n\t\t\t\t\tstring += string;\n\t\t\t\t}\n\t\t\t\tn >>= 1;\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\t\tif (defineProperty) {\n\t\t\tdefineProperty(String.prototype, 'repeat', {\n\t\t\t\t'value': repeat,\n\t\t\t\t'configurable': true,\n\t\t\t\t'writable': true\n\t\t\t});\n\t\t} else {\n\t\t\tString.prototype.repeat = repeat;\n\t\t}\n\t}());\n}\n","\"use strict\";\n\nimport Node from \"./node.js\";\nimport * as common from \"./common.js\";\nimport fromCodePoint from \"./from-code-point.js\";\nimport { decodeHTML } from \"entities\";\nimport \"string.prototype.repeat\"; // Polyfill for String.prototype.repeat\n\nvar normalizeURI = common.normalizeURI;\nvar unescapeString = common.unescapeString;\n\n// Constants for character codes:\n\nvar C_NEWLINE = 10;\nvar C_ASTERISK = 42;\nvar C_UNDERSCORE = 95;\nvar C_BACKTICK = 96;\nvar C_OPEN_BRACKET = 91;\nvar C_CLOSE_BRACKET = 93;\nvar C_LESSTHAN = 60;\nvar C_BANG = 33;\nvar C_BACKSLASH = 92;\nvar C_AMPERSAND = 38;\nvar C_OPEN_PAREN = 40;\nvar C_CLOSE_PAREN = 41;\nvar C_COLON = 58;\nvar C_SINGLEQUOTE = 39;\nvar C_DOUBLEQUOTE = 34;\n\n// Some regexps used in inline parser:\n\nvar ESCAPABLE = common.ESCAPABLE;\nvar ESCAPED_CHAR = \"\\\\\\\\\" + ESCAPABLE;\n\nvar ENTITY = common.ENTITY;\nvar reHtmlTag = common.reHtmlTag;\n\nvar rePunctuation = new RegExp(\n    /[!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E42\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDF3C-\\uDF3E]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]/\n);\n\nvar reLinkTitle = new RegExp(\n    '^(?:\"(' +\n        ESCAPED_CHAR +\n        '|[^\"\\\\x00])*\"' +\n        \"|\" +\n        \"'(\" +\n        ESCAPED_CHAR +\n        \"|[^'\\\\x00])*'\" +\n        \"|\" +\n        \"\\\\((\" +\n        ESCAPED_CHAR +\n        \"|[^()\\\\x00])*\\\\))\"\n);\n\nvar reLinkDestinationBraces = /^(?:<(?:[^<>\\n\\\\\\x00]|\\\\.)*>)/;\n\nvar reEscapable = new RegExp(\"^\" + ESCAPABLE);\n\nvar reEntityHere = new RegExp(\"^\" + ENTITY, \"i\");\n\nvar reTicks = /`+/;\n\nvar reTicksHere = /^`+/;\n\nvar reEllipses = /\\.\\.\\./g;\n\nvar reDash = /--+/g;\n\nvar reEmailAutolink = /^<([a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)>/;\n\nvar reAutolink = /^<[A-Za-z][A-Za-z0-9.+-]{1,31}:[^<>\\x00-\\x20]*>/i;\n\nvar reSpnl = /^ *(?:\\n *)?/;\n\nvar reWhitespaceChar = /^[ \\t\\n\\x0b\\x0c\\x0d]/;\n\nvar reUnicodeWhitespaceChar = /^\\s/;\n\nvar reFinalSpace = / *$/;\n\nvar reInitialSpace = /^ */;\n\nvar reSpaceAtEndOfLine = /^ *(?:\\n|$)/;\n\nvar reLinkLabel = /^\\[(?:[^\\\\\\[\\]]|\\\\.){0,1000}\\]/;\n\n// Matches a string of non-special characters.\nvar reMain = /^[^\\n`\\[\\]\\\\!<&*_'\"]+/m;\n\nvar text = function(s) {\n    var node = new Node(\"text\");\n    node._literal = s;\n    return node;\n};\n\n// normalize a reference in reference link (remove []s, trim,\n// collapse internal space, unicode case fold.\n// See commonmark/commonmark.js#168.\nvar normalizeReference = function(string) {\n    return string\n        .slice(1, string.length - 1)\n        .trim()\n        .replace(/[ \\t\\r\\n]+/, \" \")\n        .toLowerCase()\n        .toUpperCase();\n};\n\n// INLINE PARSER\n\n// These are methods of an InlineParser object, defined below.\n// An InlineParser keeps track of a subject (a string to be\n// parsed) and a position in that subject.\n\n// If re matches at current position in the subject, advance\n// position in subject and return the match; otherwise return null.\nvar match = function(re) {\n    var m = re.exec(this.subject.slice(this.pos));\n    if (m === null) {\n        return null;\n    } else {\n        this.pos += m.index + m[0].length;\n        return m[0];\n    }\n};\n\n// Returns the code for the character at the current subject position, or -1\n// there are no more characters.\nvar peek = function() {\n    if (this.pos < this.subject.length) {\n        return this.subject.charCodeAt(this.pos);\n    } else {\n        return -1;\n    }\n};\n\n// Parse zero or more space characters, including at most one newline\nvar spnl = function() {\n    this.match(reSpnl);\n    return true;\n};\n\n// All of the parsers below try to match something at the current position\n// in the subject.  If they succeed in matching anything, they\n// return the inline matched, advancing the subject.\n\n// Attempt to parse backticks, adding either a backtick code span or a\n// literal sequence of backticks.\nvar parseBackticks = function(block) {\n    var ticks = this.match(reTicksHere);\n    if (ticks === null) {\n        return false;\n    }\n    var afterOpenTicks = this.pos;\n    var matched;\n    var node;\n    var contents;\n    while ((matched = this.match(reTicks)) !== null) {\n        if (matched === ticks) {\n            node = new Node(\"code\");\n            contents = this.subject\n                .slice(afterOpenTicks, this.pos - ticks.length)\n                .replace(/\\n/gm, \" \");\n            if (\n                contents.length > 0 &&\n                contents.match(/[^ ]/) !== null &&\n                contents[0] == \" \" &&\n                contents[contents.length - 1] == \" \"\n            ) {\n                node._literal = contents.slice(1, contents.length - 1);\n            } else {\n                node._literal = contents;\n            }\n            block.appendChild(node);\n            return true;\n        }\n    }\n    // If we got here, we didn't match a closing backtick sequence.\n    this.pos = afterOpenTicks;\n    block.appendChild(text(ticks));\n    return true;\n};\n\n// Parse a backslash-escaped special character, adding either the escaped\n// character, a hard line break (if the backslash is followed by a newline),\n// or a literal backslash to the block's children.  Assumes current character\n// is a backslash.\nvar parseBackslash = function(block) {\n    var subj = this.subject;\n    var node;\n    this.pos += 1;\n    if (this.peek() === C_NEWLINE) {\n        this.pos += 1;\n        node = new Node(\"linebreak\");\n        block.appendChild(node);\n    } else if (reEscapable.test(subj.charAt(this.pos))) {\n        block.appendChild(text(subj.charAt(this.pos)));\n        this.pos += 1;\n    } else {\n        block.appendChild(text(\"\\\\\"));\n    }\n    return true;\n};\n\n// Attempt to parse an autolink (URL or email in pointy brackets).\nvar parseAutolink = function(block) {\n    var m;\n    var dest;\n    var node;\n    if ((m = this.match(reEmailAutolink))) {\n        dest = m.slice(1, m.length - 1);\n        node = new Node(\"link\");\n        node._destination = normalizeURI(\"mailto:\" + dest);\n        node._title = \"\";\n        node.appendChild(text(dest));\n        block.appendChild(node);\n        return true;\n    } else if ((m = this.match(reAutolink))) {\n        dest = m.slice(1, m.length - 1);\n        node = new Node(\"link\");\n        node._destination = normalizeURI(dest);\n        node._title = \"\";\n        node.appendChild(text(dest));\n        block.appendChild(node);\n        return true;\n    } else {\n        return false;\n    }\n};\n\n// Attempt to parse a raw HTML tag.\nvar parseHtmlTag = function(block) {\n    var m = this.match(reHtmlTag);\n    if (m === null) {\n        return false;\n    } else {\n        var node = new Node(\"html_inline\");\n        node._literal = m;\n        block.appendChild(node);\n        return true;\n    }\n};\n\n// Scan a sequence of characters with code cc, and return information about\n// the number of delimiters and whether they are positioned such that\n// they can open and/or close emphasis or strong emphasis.  A utility\n// function for strong/emph parsing.\nvar scanDelims = function(cc) {\n    var numdelims = 0;\n    var char_before, char_after, cc_after;\n    var startpos = this.pos;\n    var left_flanking, right_flanking, can_open, can_close;\n    var after_is_whitespace,\n        after_is_punctuation,\n        before_is_whitespace,\n        before_is_punctuation;\n\n    if (cc === C_SINGLEQUOTE || cc === C_DOUBLEQUOTE) {\n        numdelims++;\n        this.pos++;\n    } else {\n        while (this.peek() === cc) {\n            numdelims++;\n            this.pos++;\n        }\n    }\n\n    if (numdelims === 0) {\n        return null;\n    }\n\n    char_before = startpos === 0 ? \"\\n\" : this.subject.charAt(startpos - 1);\n\n    cc_after = this.peek();\n    if (cc_after === -1) {\n        char_after = \"\\n\";\n    } else {\n        char_after = fromCodePoint(cc_after);\n    }\n\n    after_is_whitespace = reUnicodeWhitespaceChar.test(char_after);\n    after_is_punctuation = rePunctuation.test(char_after);\n    before_is_whitespace = reUnicodeWhitespaceChar.test(char_before);\n    before_is_punctuation = rePunctuation.test(char_before);\n\n    left_flanking =\n        !after_is_whitespace &&\n        (!after_is_punctuation ||\n            before_is_whitespace ||\n            before_is_punctuation);\n    right_flanking =\n        !before_is_whitespace &&\n        (!before_is_punctuation || after_is_whitespace || after_is_punctuation);\n    if (cc === C_UNDERSCORE) {\n        can_open = left_flanking && (!right_flanking || before_is_punctuation);\n        can_close = right_flanking && (!left_flanking || after_is_punctuation);\n    } else if (cc === C_SINGLEQUOTE || cc === C_DOUBLEQUOTE) {\n        can_open = left_flanking && !right_flanking;\n        can_close = right_flanking;\n    } else {\n        can_open = left_flanking;\n        can_close = right_flanking;\n    }\n    this.pos = startpos;\n    return { numdelims: numdelims, can_open: can_open, can_close: can_close };\n};\n\n// Handle a delimiter marker for emphasis or a quote.\nvar handleDelim = function(cc, block) {\n    var res = this.scanDelims(cc);\n    if (!res) {\n        return false;\n    }\n    var numdelims = res.numdelims;\n    var startpos = this.pos;\n    var contents;\n\n    this.pos += numdelims;\n    if (cc === C_SINGLEQUOTE) {\n        contents = \"\\u2019\";\n    } else if (cc === C_DOUBLEQUOTE) {\n        contents = \"\\u201C\";\n    } else {\n        contents = this.subject.slice(startpos, this.pos);\n    }\n    var node = text(contents);\n    block.appendChild(node);\n\n    // Add entry to stack for this opener\n    if (\n        (res.can_open || res.can_close) &&\n        (this.options.smart || (cc !== C_SINGLEQUOTE && cc !== C_DOUBLEQUOTE))\n    ) {\n        this.delimiters = {\n            cc: cc,\n            numdelims: numdelims,\n            origdelims: numdelims,\n            node: node,\n            previous: this.delimiters,\n            next: null,\n            can_open: res.can_open,\n            can_close: res.can_close\n        };\n        if (this.delimiters.previous !== null) {\n            this.delimiters.previous.next = this.delimiters;\n        }\n    }\n\n    return true;\n};\n\nvar removeDelimiter = function(delim) {\n    if (delim.previous !== null) {\n        delim.previous.next = delim.next;\n    }\n    if (delim.next === null) {\n        // top of stack\n        this.delimiters = delim.previous;\n    } else {\n        delim.next.previous = delim.previous;\n    }\n};\n\nvar removeDelimitersBetween = function(bottom, top) {\n    if (bottom.next !== top) {\n        bottom.next = top;\n        top.previous = bottom;\n    }\n};\n\nvar processEmphasis = function(stack_bottom) {\n    var opener, closer, old_closer;\n    var opener_inl, closer_inl;\n    var tempstack;\n    var use_delims;\n    var tmp, next;\n    var opener_found;\n    var openers_bottom = [[], [], []];\n    var odd_match = false;\n\n    for (var i = 0; i < 3; i++) {\n        openers_bottom[i][C_UNDERSCORE] = stack_bottom;\n        openers_bottom[i][C_ASTERISK] = stack_bottom;\n        openers_bottom[i][C_SINGLEQUOTE] = stack_bottom;\n        openers_bottom[i][C_DOUBLEQUOTE] = stack_bottom;\n    }\n    // find first closer above stack_bottom:\n    closer = this.delimiters;\n    while (closer !== null && closer.previous !== stack_bottom) {\n        closer = closer.previous;\n    }\n    // move forward, looking for closers, and handling each\n    while (closer !== null) {\n        var closercc = closer.cc;\n        if (!closer.can_close) {\n            closer = closer.next;\n        } else {\n            // found emphasis closer. now look back for first matching opener:\n            opener = closer.previous;\n            opener_found = false;\n            while (\n                opener !== null &&\n                opener !== stack_bottom &&\n                opener !== openers_bottom[closer.origdelims % 3][closercc]\n            ) {\n                odd_match =\n                    (closer.can_open || opener.can_close) &&\n                    closer.origdelims % 3 !== 0 &&\n                    (opener.origdelims + closer.origdelims) % 3 === 0;\n                if (opener.cc === closer.cc && opener.can_open && !odd_match) {\n                    opener_found = true;\n                    break;\n                }\n                opener = opener.previous;\n            }\n            old_closer = closer;\n\n            if (closercc === C_ASTERISK || closercc === C_UNDERSCORE) {\n                if (!opener_found) {\n                    closer = closer.next;\n                } else {\n                    // calculate actual number of delimiters used from closer\n                    use_delims =\n                        closer.numdelims >= 2 && opener.numdelims >= 2 ? 2 : 1;\n\n                    opener_inl = opener.node;\n                    closer_inl = closer.node;\n\n                    // remove used delimiters from stack elts and inlines\n                    opener.numdelims -= use_delims;\n                    closer.numdelims -= use_delims;\n                    opener_inl._literal = opener_inl._literal.slice(\n                        0,\n                        opener_inl._literal.length - use_delims\n                    );\n                    closer_inl._literal = closer_inl._literal.slice(\n                        0,\n                        closer_inl._literal.length - use_delims\n                    );\n\n                    // build contents for new emph element\n                    var emph = new Node(use_delims === 1 ? \"emph\" : \"strong\");\n\n                    tmp = opener_inl._next;\n                    while (tmp && tmp !== closer_inl) {\n                        next = tmp._next;\n                        tmp.unlink();\n                        emph.appendChild(tmp);\n                        tmp = next;\n                    }\n\n                    opener_inl.insertAfter(emph);\n\n                    // remove elts between opener and closer in delimiters stack\n                    removeDelimitersBetween(opener, closer);\n\n                    // if opener has 0 delims, remove it and the inline\n                    if (opener.numdelims === 0) {\n                        opener_inl.unlink();\n                        this.removeDelimiter(opener);\n                    }\n\n                    if (closer.numdelims === 0) {\n                        closer_inl.unlink();\n                        tempstack = closer.next;\n                        this.removeDelimiter(closer);\n                        closer = tempstack;\n                    }\n                }\n            } else if (closercc === C_SINGLEQUOTE) {\n                closer.node._literal = \"\\u2019\";\n                if (opener_found) {\n                    opener.node._literal = \"\\u2018\";\n                }\n                closer = closer.next;\n            } else if (closercc === C_DOUBLEQUOTE) {\n                closer.node._literal = \"\\u201D\";\n                if (opener_found) {\n                    opener.node.literal = \"\\u201C\";\n                }\n                closer = closer.next;\n            }\n            if (!opener_found) {\n                // Set lower bound for future searches for openers:\n                openers_bottom[old_closer.origdelims % 3][closercc] =\n                    old_closer.previous;\n                if (!old_closer.can_open) {\n                    // We can remove a closer that can't be an opener,\n                    // once we've seen there's no matching opener:\n                    this.removeDelimiter(old_closer);\n                }\n            }\n        }\n    }\n\n    // remove all delimiters\n    while (this.delimiters !== null && this.delimiters !== stack_bottom) {\n        this.removeDelimiter(this.delimiters);\n    }\n};\n\n// Attempt to parse link title (sans quotes), returning the string\n// or null if no match.\nvar parseLinkTitle = function() {\n    var title = this.match(reLinkTitle);\n    if (title === null) {\n        return null;\n    } else {\n        // chop off quotes from title and unescape:\n        return unescapeString(title.substr(1, title.length - 2));\n    }\n};\n\n// Attempt to parse link destination, returning the string or\n// null if no match.\nvar parseLinkDestination = function() {\n    var res = this.match(reLinkDestinationBraces);\n    if (res === null) {\n        if (this.peek() === C_LESSTHAN) {\n            return null;\n        }\n        // TODO handrolled parser; res should be null or the string\n        var savepos = this.pos;\n        var openparens = 0;\n        var c;\n        while ((c = this.peek()) !== -1) {\n            if (\n                c === C_BACKSLASH &&\n                reEscapable.test(this.subject.charAt(this.pos + 1))\n            ) {\n                this.pos += 1;\n                if (this.peek() !== -1) {\n                    this.pos += 1;\n                }\n            } else if (c === C_OPEN_PAREN) {\n                this.pos += 1;\n                openparens += 1;\n            } else if (c === C_CLOSE_PAREN) {\n                if (openparens < 1) {\n                    break;\n                } else {\n                    this.pos += 1;\n                    openparens -= 1;\n                }\n            } else if (reWhitespaceChar.exec(fromCodePoint(c)) !== null) {\n                break;\n            } else {\n                this.pos += 1;\n            }\n        }\n        if (this.pos === savepos && c !== C_CLOSE_PAREN) {\n            return null;\n        }\n        if (openparens !== 0) {\n            return null;\n        }\n        res = this.subject.substr(savepos, this.pos - savepos);\n        return normalizeURI(unescapeString(res));\n    } else {\n        // chop off surrounding <..>:\n        return normalizeURI(unescapeString(res.substr(1, res.length - 2)));\n    }\n};\n\n// Attempt to parse a link label, returning number of characters parsed.\nvar parseLinkLabel = function() {\n    var m = this.match(reLinkLabel);\n    if (m === null || m.length > 1001) {\n        return 0;\n    } else {\n        return m.length;\n    }\n};\n\n// Add open bracket to delimiter stack and add a text node to block's children.\nvar parseOpenBracket = function(block) {\n    var startpos = this.pos;\n    this.pos += 1;\n\n    var node = text(\"[\");\n    block.appendChild(node);\n\n    // Add entry to stack for this opener\n    this.addBracket(node, startpos, false);\n    return true;\n};\n\n// IF next character is [, and ! delimiter to delimiter stack and\n// add a text node to block's children.  Otherwise just add a text node.\nvar parseBang = function(block) {\n    var startpos = this.pos;\n    this.pos += 1;\n    if (this.peek() === C_OPEN_BRACKET) {\n        this.pos += 1;\n\n        var node = text(\"![\");\n        block.appendChild(node);\n\n        // Add entry to stack for this opener\n        this.addBracket(node, startpos + 1, true);\n    } else {\n        block.appendChild(text(\"!\"));\n    }\n    return true;\n};\n\n// Try to match close bracket against an opening in the delimiter\n// stack.  Add either a link or image, or a plain [ character,\n// to block's children.  If there is a matching delimiter,\n// remove it from the delimiter stack.\nvar parseCloseBracket = function(block) {\n    var startpos;\n    var is_image;\n    var dest;\n    var title;\n    var matched = false;\n    var reflabel;\n    var opener;\n\n    this.pos += 1;\n    startpos = this.pos;\n\n    // get last [ or ![\n    opener = this.brackets;\n\n    if (opener === null) {\n        // no matched opener, just return a literal\n        block.appendChild(text(\"]\"));\n        return true;\n    }\n\n    if (!opener.active) {\n        // no matched opener, just return a literal\n        block.appendChild(text(\"]\"));\n        // take opener off brackets stack\n        this.removeBracket();\n        return true;\n    }\n\n    // If we got here, open is a potential opener\n    is_image = opener.image;\n\n    // Check to see if we have a link/image\n\n    var savepos = this.pos;\n\n    // Inline link?\n    if (this.peek() === C_OPEN_PAREN) {\n        this.pos++;\n        if (\n            this.spnl() &&\n            (dest = this.parseLinkDestination()) !== null &&\n            this.spnl() &&\n            // make sure there's a space before the title:\n            ((reWhitespaceChar.test(this.subject.charAt(this.pos - 1)) &&\n                (title = this.parseLinkTitle())) ||\n                true) &&\n            this.spnl() &&\n            this.peek() === C_CLOSE_PAREN\n        ) {\n            this.pos += 1;\n            matched = true;\n        } else {\n            this.pos = savepos;\n        }\n    }\n\n    if (!matched) {\n        // Next, see if there's a link label\n        var beforelabel = this.pos;\n        var n = this.parseLinkLabel();\n        if (n > 2) {\n            reflabel = this.subject.slice(beforelabel, beforelabel + n);\n        } else if (!opener.bracketAfter) {\n            // Empty or missing second label means to use the first label as the reference.\n            // The reference must not contain a bracket. If we know there's a bracket, we don't even bother checking it.\n            reflabel = this.subject.slice(opener.index, startpos);\n        }\n        if (n === 0) {\n            // If shortcut reference link, rewind before spaces we skipped.\n            this.pos = savepos;\n        }\n\n        if (reflabel) {\n            // lookup rawlabel in refmap\n            var link = this.refmap[normalizeReference(reflabel)];\n            if (link) {\n                dest = link.destination;\n                title = link.title;\n                matched = true;\n            }\n        }\n    }\n\n    if (matched) {\n        var node = new Node(is_image ? \"image\" : \"link\");\n        node._destination = dest;\n        node._title = title || \"\";\n\n        var tmp, next;\n        tmp = opener.node._next;\n        while (tmp) {\n            next = tmp._next;\n            tmp.unlink();\n            node.appendChild(tmp);\n            tmp = next;\n        }\n        block.appendChild(node);\n        this.processEmphasis(opener.previousDelimiter);\n        this.removeBracket();\n        opener.node.unlink();\n\n        // We remove this bracket and processEmphasis will remove later delimiters.\n        // Now, for a link, we also deactivate earlier link openers.\n        // (no links in links)\n        if (!is_image) {\n            opener = this.brackets;\n            while (opener !== null) {\n                if (!opener.image) {\n                    opener.active = false; // deactivate this opener\n                }\n                opener = opener.previous;\n            }\n        }\n\n        return true;\n    } else {\n        // no match\n\n        this.removeBracket(); // remove this opener from stack\n        this.pos = startpos;\n        block.appendChild(text(\"]\"));\n        return true;\n    }\n};\n\nvar addBracket = function(node, index, image) {\n    if (this.brackets !== null) {\n        this.brackets.bracketAfter = true;\n    }\n    this.brackets = {\n        node: node,\n        previous: this.brackets,\n        previousDelimiter: this.delimiters,\n        index: index,\n        image: image,\n        active: true\n    };\n};\n\nvar removeBracket = function() {\n    this.brackets = this.brackets.previous;\n};\n\n// Attempt to parse an entity.\nvar parseEntity = function(block) {\n    var m;\n    if ((m = this.match(reEntityHere))) {\n        block.appendChild(text(decodeHTML(m)));\n        return true;\n    } else {\n        return false;\n    }\n};\n\n// Parse a run of ordinary characters, or a single character with\n// a special meaning in markdown, as a plain string.\nvar parseString = function(block) {\n    var m;\n    if ((m = this.match(reMain))) {\n        if (this.options.smart) {\n            block.appendChild(\n                text(\n                    m\n                        .replace(reEllipses, \"\\u2026\")\n                        .replace(reDash, function(chars) {\n                            var enCount = 0;\n                            var emCount = 0;\n                            if (chars.length % 3 === 0) {\n                                // If divisible by 3, use all em dashes\n                                emCount = chars.length / 3;\n                            } else if (chars.length % 2 === 0) {\n                                // If divisible by 2, use all en dashes\n                                enCount = chars.length / 2;\n                            } else if (chars.length % 3 === 2) {\n                                // If 2 extra dashes, use en dash for last 2; em dashes for rest\n                                enCount = 1;\n                                emCount = (chars.length - 2) / 3;\n                            } else {\n                                // Use en dashes for last 4 hyphens; em dashes for rest\n                                enCount = 2;\n                                emCount = (chars.length - 4) / 3;\n                            }\n                            return (\n                                \"\\u2014\".repeat(emCount) +\n                                \"\\u2013\".repeat(enCount)\n                            );\n                        })\n                )\n            );\n        } else {\n            block.appendChild(text(m));\n        }\n        return true;\n    } else {\n        return false;\n    }\n};\n\n// Parse a newline.  If it was preceded by two spaces, return a hard\n// line break; otherwise a soft line break.\nvar parseNewline = function(block) {\n    this.pos += 1; // assume we're at a \\n\n    // check previous node for trailing spaces\n    var lastc = block._lastChild;\n    if (\n        lastc &&\n        lastc.type === \"text\" &&\n        lastc._literal[lastc._literal.length - 1] === \" \"\n    ) {\n        var hardbreak = lastc._literal[lastc._literal.length - 2] === \" \";\n        lastc._literal = lastc._literal.replace(reFinalSpace, \"\");\n        block.appendChild(new Node(hardbreak ? \"linebreak\" : \"softbreak\"));\n    } else {\n        block.appendChild(new Node(\"softbreak\"));\n    }\n    this.match(reInitialSpace); // gobble leading spaces in next line\n    return true;\n};\n\n// Attempt to parse a link reference, modifying refmap.\nvar parseReference = function(s, refmap) {\n    this.subject = s;\n    this.pos = 0;\n    var rawlabel;\n    var dest;\n    var title;\n    var matchChars;\n    var startpos = this.pos;\n\n    // label:\n    matchChars = this.parseLinkLabel();\n    if (matchChars === 0) {\n        return 0;\n    } else {\n        rawlabel = this.subject.substr(0, matchChars);\n    }\n\n    // colon:\n    if (this.peek() === C_COLON) {\n        this.pos++;\n    } else {\n        this.pos = startpos;\n        return 0;\n    }\n\n    //  link url\n    this.spnl();\n\n    dest = this.parseLinkDestination();\n    if (dest === null) {\n        this.pos = startpos;\n        return 0;\n    }\n\n    var beforetitle = this.pos;\n    this.spnl();\n    if (this.pos !== beforetitle) {\n        title = this.parseLinkTitle();\n    }\n    if (title === null) {\n        title = \"\";\n        // rewind before spaces\n        this.pos = beforetitle;\n    }\n\n    // make sure we're at line end:\n    var atLineEnd = true;\n    if (this.match(reSpaceAtEndOfLine) === null) {\n        if (title === \"\") {\n            atLineEnd = false;\n        } else {\n            // the potential title we found is not at the line end,\n            // but it could still be a legal link reference if we\n            // discard the title\n            title = \"\";\n            // rewind before spaces\n            this.pos = beforetitle;\n            // and instead check if the link URL is at the line end\n            atLineEnd = this.match(reSpaceAtEndOfLine) !== null;\n        }\n    }\n\n    if (!atLineEnd) {\n        this.pos = startpos;\n        return 0;\n    }\n\n    var normlabel = normalizeReference(rawlabel);\n    if (normlabel === \"\") {\n        // label must contain non-whitespace characters\n        this.pos = startpos;\n        return 0;\n    }\n\n    if (!refmap[normlabel]) {\n        refmap[normlabel] = { destination: dest, title: title };\n    }\n    return this.pos - startpos;\n};\n\n// Parse the next inline element in subject, advancing subject position.\n// On success, add the result to block's children and return true.\n// On failure, return false.\nvar parseInline = function(block) {\n    var res = false;\n    var c = this.peek();\n    if (c === -1) {\n        return false;\n    }\n    switch (c) {\n        case C_NEWLINE:\n            res = this.parseNewline(block);\n            break;\n        case C_BACKSLASH:\n            res = this.parseBackslash(block);\n            break;\n        case C_BACKTICK:\n            res = this.parseBackticks(block);\n            break;\n        case C_ASTERISK:\n        case C_UNDERSCORE:\n            res = this.handleDelim(c, block);\n            break;\n        case C_SINGLEQUOTE:\n        case C_DOUBLEQUOTE:\n            res = this.options.smart && this.handleDelim(c, block);\n            break;\n        case C_OPEN_BRACKET:\n            res = this.parseOpenBracket(block);\n            break;\n        case C_BANG:\n            res = this.parseBang(block);\n            break;\n        case C_CLOSE_BRACKET:\n            res = this.parseCloseBracket(block);\n            break;\n        case C_LESSTHAN:\n            res = this.parseAutolink(block) || this.parseHtmlTag(block);\n            break;\n        case C_AMPERSAND:\n            res = this.parseEntity(block);\n            break;\n        default:\n            res = this.parseString(block);\n            break;\n    }\n    if (!res) {\n        this.pos += 1;\n        block.appendChild(text(fromCodePoint(c)));\n    }\n\n    return true;\n};\n\n// Parse string content in block into inline children,\n// using refmap to resolve references.\nvar parseInlines = function(block) {\n    this.subject = block._string_content.trim();\n    this.pos = 0;\n    this.delimiters = null;\n    this.brackets = null;\n    while (this.parseInline(block)) {}\n    block._string_content = null; // allow raw string to be garbage collected\n    this.processEmphasis(null);\n};\n\n// The InlineParser object.\nfunction InlineParser(options) {\n    return {\n        subject: \"\",\n        delimiters: null, // used by handleDelim method\n        brackets: null,\n        pos: 0,\n        refmap: {},\n        match: match,\n        peek: peek,\n        spnl: spnl,\n        parseBackticks: parseBackticks,\n        parseBackslash: parseBackslash,\n        parseAutolink: parseAutolink,\n        parseHtmlTag: parseHtmlTag,\n        scanDelims: scanDelims,\n        handleDelim: handleDelim,\n        parseLinkTitle: parseLinkTitle,\n        parseLinkDestination: parseLinkDestination,\n        parseLinkLabel: parseLinkLabel,\n        parseOpenBracket: parseOpenBracket,\n        parseBang: parseBang,\n        parseCloseBracket: parseCloseBracket,\n        addBracket: addBracket,\n        removeBracket: removeBracket,\n        parseEntity: parseEntity,\n        parseString: parseString,\n        parseNewline: parseNewline,\n        parseReference: parseReference,\n        parseInline: parseInline,\n        processEmphasis: processEmphasis,\n        removeDelimiter: removeDelimiter,\n        options: options || {},\n        parse: parseInlines\n    };\n}\n\nexport default InlineParser;\n","\"use strict\";\n\nimport Node from \"./node.js\";\nimport { unescapeString, OPENTAG, CLOSETAG } from \"./common.js\";\nimport InlineParser from \"./inlines.js\";\n\nvar CODE_INDENT = 4;\n\nvar C_TAB = 9;\nvar C_NEWLINE = 10;\nvar C_GREATERTHAN = 62;\nvar C_LESSTHAN = 60;\nvar C_SPACE = 32;\nvar C_OPEN_BRACKET = 91;\n\nvar reHtmlBlockOpen = [\n    /./, // dummy for 0\n    /^<(?:script|pre|textarea|style)(?:\\s|>|$)/i,\n    /^<!--/,\n    /^<[?]/,\n    /^<![A-Z]/,\n    /^<!\\[CDATA\\[/,\n    /^<[/]?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[123456]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\\s|[/]?[>]|$)/i,\n    new RegExp(\"^(?:\" + OPENTAG + \"|\" + CLOSETAG + \")\\\\s*$\", \"i\")\n];\n\nvar reHtmlBlockClose = [\n    /./, // dummy for 0\n    /<\\/(?:script|pre|textarea|style)>/i,\n    /-->/,\n    /\\?>/,\n    />/,\n    /\\]\\]>/\n];\n\nvar reThematicBreak = /^(?:(?:\\*[ \\t]*){3,}|(?:_[ \\t]*){3,}|(?:-[ \\t]*){3,})[ \\t]*$/;\n\nvar reMaybeSpecial = /^[#`~*+_=<>0-9-]/;\n\nvar reNonSpace = /[^ \\t\\f\\v\\r\\n]/;\n\nvar reBulletListMarker = /^[*+-]/;\n\nvar reOrderedListMarker = /^(\\d{1,9})([.)])/;\n\nvar reATXHeadingMarker = /^#{1,6}(?:[ \\t]+|$)/;\n\nvar reCodeFence = /^`{3,}(?!.*`)|^~{3,}/;\n\nvar reClosingCodeFence = /^(?:`{3,}|~{3,})(?= *$)/;\n\nvar reSetextHeadingLine = /^(?:=+|-+)[ \\t]*$/;\n\nvar reLineEnding = /\\r\\n|\\n|\\r/;\n\n// Returns true if string contains only space characters.\nvar isBlank = function(s) {\n    return !reNonSpace.test(s);\n};\n\nvar isSpaceOrTab = function(c) {\n    return c === C_SPACE || c === C_TAB;\n};\n\nvar peek = function(ln, pos) {\n    if (pos < ln.length) {\n        return ln.charCodeAt(pos);\n    } else {\n        return -1;\n    }\n};\n\n// DOC PARSER\n\n// These are methods of a Parser object, defined below.\n\n// Returns true if block ends with a blank line, descending if needed\n// into lists and sublists.\nvar endsWithBlankLine = function(block) {\n    while (block) {\n        if (block._lastLineBlank) {\n            return true;\n        }\n        var t = block.type;\n        if (!block._lastLineChecked && (t === \"list\" || t === \"item\")) {\n            block._lastLineChecked = true;\n            block = block._lastChild;\n        } else {\n            block._lastLineChecked = true;\n            break;\n        }\n    }\n    return false;\n};\n\n// Add a line to the block at the tip.  We assume the tip\n// can accept lines -- that check should be done before calling this.\nvar addLine = function() {\n    if (this.partiallyConsumedTab) {\n        this.offset += 1; // skip over tab\n        // add space characters:\n        var charsToTab = 4 - (this.column % 4);\n        this.tip._string_content += \" \".repeat(charsToTab);\n    }\n    this.tip._string_content += this.currentLine.slice(this.offset) + \"\\n\";\n};\n\n// Add block of type tag as a child of the tip.  If the tip can't\n// accept children, close and finalize it and try its parent,\n// and so on til we find a block that can accept children.\nvar addChild = function(tag, offset) {\n    while (!this.blocks[this.tip.type].canContain(tag)) {\n        this.finalize(this.tip, this.lineNumber - 1);\n    }\n\n    var column_number = offset + 1; // offset 0 = column 1\n    var newBlock = new Node(tag, [\n        [this.lineNumber, column_number],\n        [0, 0]\n    ]);\n    newBlock._string_content = \"\";\n    this.tip.appendChild(newBlock);\n    this.tip = newBlock;\n    return newBlock;\n};\n\n// Parse a list marker and return data on the marker (type,\n// start, delimiter, bullet character, padding) or null.\nvar parseListMarker = function(parser, container) {\n    var rest = parser.currentLine.slice(parser.nextNonspace);\n    var match;\n    var nextc;\n    var spacesStartCol;\n    var spacesStartOffset;\n    var data = {\n        type: null,\n        tight: true, // lists are tight by default\n        bulletChar: null,\n        start: null,\n        delimiter: null,\n        padding: null,\n        markerOffset: parser.indent\n    };\n    if (parser.indent >= 4) {\n        return null;\n    }\n    if ((match = rest.match(reBulletListMarker))) {\n        data.type = \"bullet\";\n        data.bulletChar = match[0][0];\n    } else if (\n        (match = rest.match(reOrderedListMarker)) &&\n        (container.type !== \"paragraph\" || match[1] === \"1\")\n    ) {\n        data.type = \"ordered\";\n        data.start = parseInt(match[1]);\n        data.delimiter = match[2];\n    } else {\n        return null;\n    }\n    // make sure we have spaces after\n    nextc = peek(parser.currentLine, parser.nextNonspace + match[0].length);\n    if (!(nextc === -1 || nextc === C_TAB || nextc === C_SPACE)) {\n        return null;\n    }\n\n    // if it interrupts paragraph, make sure first line isn't blank\n    if (\n        container.type === \"paragraph\" &&\n        !parser.currentLine\n            .slice(parser.nextNonspace + match[0].length)\n            .match(reNonSpace)\n    ) {\n        return null;\n    }\n\n    // we've got a match! advance offset and calculate padding\n    parser.advanceNextNonspace(); // to start of marker\n    parser.advanceOffset(match[0].length, true); // to end of marker\n    spacesStartCol = parser.column;\n    spacesStartOffset = parser.offset;\n    do {\n        parser.advanceOffset(1, true);\n        nextc = peek(parser.currentLine, parser.offset);\n    } while (parser.column - spacesStartCol < 5 && isSpaceOrTab(nextc));\n    var blank_item = peek(parser.currentLine, parser.offset) === -1;\n    var spaces_after_marker = parser.column - spacesStartCol;\n    if (spaces_after_marker >= 5 || spaces_after_marker < 1 || blank_item) {\n        data.padding = match[0].length + 1;\n        parser.column = spacesStartCol;\n        parser.offset = spacesStartOffset;\n        if (isSpaceOrTab(peek(parser.currentLine, parser.offset))) {\n            parser.advanceOffset(1, true);\n        }\n    } else {\n        data.padding = match[0].length + spaces_after_marker;\n    }\n    return data;\n};\n\n// Returns true if the two list items are of the same type,\n// with the same delimiter and bullet character.  This is used\n// in agglomerating list items into lists.\nvar listsMatch = function(list_data, item_data) {\n    return (\n        list_data.type === item_data.type &&\n        list_data.delimiter === item_data.delimiter &&\n        list_data.bulletChar === item_data.bulletChar\n    );\n};\n\n// Finalize and close any unmatched blocks.\nvar closeUnmatchedBlocks = function() {\n    if (!this.allClosed) {\n        // finalize any blocks not matched\n        while (this.oldtip !== this.lastMatchedContainer) {\n            var parent = this.oldtip._parent;\n            this.finalize(this.oldtip, this.lineNumber - 1);\n            this.oldtip = parent;\n        }\n        this.allClosed = true;\n    }\n};\n\n// 'finalize' is run when the block is closed.\n// 'continue' is run to check whether the block is continuing\n// at a certain line and offset (e.g. whether a block quote\n// contains a `>`.  It returns 0 for matched, 1 for not matched,\n// and 2 for \"we've dealt with this line completely, go to next.\"\nvar blocks = {\n    document: {\n        continue: function() {\n            return 0;\n        },\n        finalize: function() {\n            return;\n        },\n        canContain: function(t) {\n            return t !== \"item\";\n        },\n        acceptsLines: false\n    },\n    list: {\n        continue: function() {\n            return 0;\n        },\n        finalize: function(parser, block) {\n            var item = block._firstChild;\n            while (item) {\n                // check for non-final list item ending with blank line:\n                if (endsWithBlankLine(item) && item._next) {\n                    block._listData.tight = false;\n                    break;\n                }\n                // recurse into children of list item, to see if there are\n                // spaces between any of them:\n                var subitem = item._firstChild;\n                while (subitem) {\n                    if (\n                        endsWithBlankLine(subitem) &&\n                        (item._next || subitem._next)\n                    ) {\n                        block._listData.tight = false;\n                        break;\n                    }\n                    subitem = subitem._next;\n                }\n                item = item._next;\n            }\n        },\n        canContain: function(t) {\n            return t === \"item\";\n        },\n        acceptsLines: false\n    },\n    block_quote: {\n        continue: function(parser) {\n            var ln = parser.currentLine;\n            if (\n                !parser.indented &&\n                peek(ln, parser.nextNonspace) === C_GREATERTHAN\n            ) {\n                parser.advanceNextNonspace();\n                parser.advanceOffset(1, false);\n                if (isSpaceOrTab(peek(ln, parser.offset))) {\n                    parser.advanceOffset(1, true);\n                }\n            } else {\n                return 1;\n            }\n            return 0;\n        },\n        finalize: function() {\n            return;\n        },\n        canContain: function(t) {\n            return t !== \"item\";\n        },\n        acceptsLines: false\n    },\n    item: {\n        continue: function(parser, container) {\n            if (parser.blank) {\n                if (container._firstChild == null) {\n                    // Blank line after empty list item\n                    return 1;\n                } else {\n                    parser.advanceNextNonspace();\n                }\n            } else if (\n                parser.indent >=\n                container._listData.markerOffset + container._listData.padding\n            ) {\n                parser.advanceOffset(\n                    container._listData.markerOffset +\n                        container._listData.padding,\n                    true\n                );\n            } else {\n                return 1;\n            }\n            return 0;\n        },\n        finalize: function() {\n            return;\n        },\n        canContain: function(t) {\n            return t !== \"item\";\n        },\n        acceptsLines: false\n    },\n    heading: {\n        continue: function() {\n            // a heading can never container > 1 line, so fail to match:\n            return 1;\n        },\n        finalize: function() {\n            return;\n        },\n        canContain: function() {\n            return false;\n        },\n        acceptsLines: false\n    },\n    thematic_break: {\n        continue: function() {\n            // a thematic break can never container > 1 line, so fail to match:\n            return 1;\n        },\n        finalize: function() {\n            return;\n        },\n        canContain: function() {\n            return false;\n        },\n        acceptsLines: false\n    },\n    code_block: {\n        continue: function(parser, container) {\n            var ln = parser.currentLine;\n            var indent = parser.indent;\n            if (container._isFenced) {\n                // fenced\n                var match =\n                    indent <= 3 &&\n                    ln.charAt(parser.nextNonspace) === container._fenceChar &&\n                    ln.slice(parser.nextNonspace).match(reClosingCodeFence);\n                if (match && match[0].length >= container._fenceLength) {\n                    // closing fence - we're at end of line, so we can return\n                    parser.lastLineLength =\n                        parser.offset + indent + match[0].length;\n                    parser.finalize(container, parser.lineNumber);\n                    return 2;\n                } else {\n                    // skip optional spaces of fence offset\n                    var i = container._fenceOffset;\n                    while (i > 0 && isSpaceOrTab(peek(ln, parser.offset))) {\n                        parser.advanceOffset(1, true);\n                        i--;\n                    }\n                }\n            } else {\n                // indented\n                if (indent >= CODE_INDENT) {\n                    parser.advanceOffset(CODE_INDENT, true);\n                } else if (parser.blank) {\n                    parser.advanceNextNonspace();\n                } else {\n                    return 1;\n                }\n            }\n            return 0;\n        },\n        finalize: function(parser, block) {\n            if (block._isFenced) {\n                // fenced\n                // first line becomes info string\n                var content = block._string_content;\n                var newlinePos = content.indexOf(\"\\n\");\n                var firstLine = content.slice(0, newlinePos);\n                var rest = content.slice(newlinePos + 1);\n                block.info = unescapeString(firstLine.trim());\n                block._literal = rest;\n            } else {\n                // indented\n                block._literal = block._string_content.replace(\n                    /(\\n *)+$/,\n                    \"\\n\"\n                );\n            }\n            block._string_content = null; // allow GC\n        },\n        canContain: function() {\n            return false;\n        },\n        acceptsLines: true\n    },\n    html_block: {\n        continue: function(parser, container) {\n            return parser.blank &&\n                (container._htmlBlockType === 6 ||\n                    container._htmlBlockType === 7)\n                ? 1\n                : 0;\n        },\n        finalize: function(parser, block) {\n            block._literal = block._string_content.replace(/(\\n *)+$/, \"\");\n            block._string_content = null; // allow GC\n        },\n        canContain: function() {\n            return false;\n        },\n        acceptsLines: true\n    },\n    paragraph: {\n        continue: function(parser) {\n            return parser.blank ? 1 : 0;\n        },\n        finalize: function(parser, block) {\n            var pos;\n            var hasReferenceDefs = false;\n\n            // try parsing the beginning as link reference definitions:\n            while (\n                peek(block._string_content, 0) === C_OPEN_BRACKET &&\n                (pos = parser.inlineParser.parseReference(\n                    block._string_content,\n                    parser.refmap\n                ))\n            ) {\n                block._string_content = block._string_content.slice(pos);\n                hasReferenceDefs = true;\n            }\n            if (hasReferenceDefs && isBlank(block._string_content)) {\n                block.unlink();\n            }\n        },\n        canContain: function() {\n            return false;\n        },\n        acceptsLines: true\n    }\n};\n\n// block start functions.  Return values:\n// 0 = no match\n// 1 = matched container, keep going\n// 2 = matched leaf, no more block starts\nvar blockStarts = [\n    // block quote\n    function(parser) {\n        if (\n            !parser.indented &&\n            peek(parser.currentLine, parser.nextNonspace) === C_GREATERTHAN\n        ) {\n            parser.advanceNextNonspace();\n            parser.advanceOffset(1, false);\n            // optional following space\n            if (isSpaceOrTab(peek(parser.currentLine, parser.offset))) {\n                parser.advanceOffset(1, true);\n            }\n            parser.closeUnmatchedBlocks();\n            parser.addChild(\"block_quote\", parser.nextNonspace);\n            return 1;\n        } else {\n            return 0;\n        }\n    },\n\n    // ATX heading\n    function(parser) {\n        var match;\n        if (\n            !parser.indented &&\n            (match = parser.currentLine\n                .slice(parser.nextNonspace)\n                .match(reATXHeadingMarker))\n        ) {\n            parser.advanceNextNonspace();\n            parser.advanceOffset(match[0].length, false);\n            parser.closeUnmatchedBlocks();\n            var container = parser.addChild(\"heading\", parser.nextNonspace);\n            container.level = match[0].trim().length; // number of #s\n            // remove trailing ###s:\n            container._string_content = parser.currentLine\n                .slice(parser.offset)\n                .replace(/^[ \\t]*#+[ \\t]*$/, \"\")\n                .replace(/[ \\t]+#+[ \\t]*$/, \"\");\n            parser.advanceOffset(parser.currentLine.length - parser.offset);\n            return 2;\n        } else {\n            return 0;\n        }\n    },\n\n    // Fenced code block\n    function(parser) {\n        var match;\n        if (\n            !parser.indented &&\n            (match = parser.currentLine\n                .slice(parser.nextNonspace)\n                .match(reCodeFence))\n        ) {\n            var fenceLength = match[0].length;\n            parser.closeUnmatchedBlocks();\n            var container = parser.addChild(\"code_block\", parser.nextNonspace);\n            container._isFenced = true;\n            container._fenceLength = fenceLength;\n            container._fenceChar = match[0][0];\n            container._fenceOffset = parser.indent;\n            parser.advanceNextNonspace();\n            parser.advanceOffset(fenceLength, false);\n            return 2;\n        } else {\n            return 0;\n        }\n    },\n\n    // HTML block\n    function(parser, container) {\n        if (\n            !parser.indented &&\n            peek(parser.currentLine, parser.nextNonspace) === C_LESSTHAN\n        ) {\n            var s = parser.currentLine.slice(parser.nextNonspace);\n            var blockType;\n\n            for (blockType = 1; blockType <= 7; blockType++) {\n                if (\n                    reHtmlBlockOpen[blockType].test(s) &&\n                    (blockType < 7 || container.type !== \"paragraph\")\n                ) {\n                    parser.closeUnmatchedBlocks();\n                    // We don't adjust parser.offset;\n                    // spaces are part of the HTML block:\n                    var b = parser.addChild(\"html_block\", parser.offset);\n                    b._htmlBlockType = blockType;\n                    return 2;\n                }\n            }\n        }\n\n        return 0;\n    },\n\n    // Setext heading\n    function(parser, container) {\n        var match;\n        if (\n            !parser.indented &&\n            container.type === \"paragraph\" &&\n            (match = parser.currentLine\n                .slice(parser.nextNonspace)\n                .match(reSetextHeadingLine))\n        ) {\n            parser.closeUnmatchedBlocks();\n            // resolve reference link definitiosn\n            var pos;\n            while (\n                peek(container._string_content, 0) === C_OPEN_BRACKET &&\n                (pos = parser.inlineParser.parseReference(\n                    container._string_content,\n                    parser.refmap\n                ))\n            ) {\n                container._string_content = container._string_content.slice(\n                    pos\n                );\n            }\n            if (container._string_content.length > 0) {\n                var heading = new Node(\"heading\", container.sourcepos);\n                heading.level = match[0][0] === \"=\" ? 1 : 2;\n                heading._string_content = container._string_content;\n                container.insertAfter(heading);\n                container.unlink();\n                parser.tip = heading;\n                parser.advanceOffset(\n                    parser.currentLine.length - parser.offset,\n                    false\n                );\n                return 2;\n            } else {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n    },\n\n    // thematic break\n    function(parser) {\n        if (\n            !parser.indented &&\n            reThematicBreak.test(parser.currentLine.slice(parser.nextNonspace))\n        ) {\n            parser.closeUnmatchedBlocks();\n            parser.addChild(\"thematic_break\", parser.nextNonspace);\n            parser.advanceOffset(\n                parser.currentLine.length - parser.offset,\n                false\n            );\n            return 2;\n        } else {\n            return 0;\n        }\n    },\n\n    // list item\n    function(parser, container) {\n        var data;\n\n        if (\n            (!parser.indented || container.type === \"list\") &&\n            (data = parseListMarker(parser, container))\n        ) {\n            parser.closeUnmatchedBlocks();\n\n            // add the list if needed\n            if (\n                parser.tip.type !== \"list\" ||\n                !listsMatch(container._listData, data)\n            ) {\n                container = parser.addChild(\"list\", parser.nextNonspace);\n                container._listData = data;\n            }\n\n            // add the list item\n            container = parser.addChild(\"item\", parser.nextNonspace);\n            container._listData = data;\n            return 1;\n        } else {\n            return 0;\n        }\n    },\n\n    // indented code block\n    function(parser) {\n        if (\n            parser.indented &&\n            parser.tip.type !== \"paragraph\" &&\n            !parser.blank\n        ) {\n            // indented code\n            parser.advanceOffset(CODE_INDENT, true);\n            parser.closeUnmatchedBlocks();\n            parser.addChild(\"code_block\", parser.offset);\n            return 2;\n        } else {\n            return 0;\n        }\n    }\n];\n\nvar advanceOffset = function(count, columns) {\n    var currentLine = this.currentLine;\n    var charsToTab, charsToAdvance;\n    var c;\n    while (count > 0 && (c = currentLine[this.offset])) {\n        if (c === \"\\t\") {\n            charsToTab = 4 - (this.column % 4);\n            if (columns) {\n                this.partiallyConsumedTab = charsToTab > count;\n                charsToAdvance = charsToTab > count ? count : charsToTab;\n                this.column += charsToAdvance;\n                this.offset += this.partiallyConsumedTab ? 0 : 1;\n                count -= charsToAdvance;\n            } else {\n                this.partiallyConsumedTab = false;\n                this.column += charsToTab;\n                this.offset += 1;\n                count -= 1;\n            }\n        } else {\n            this.partiallyConsumedTab = false;\n            this.offset += 1;\n            this.column += 1; // assume ascii; block starts are ascii\n            count -= 1;\n        }\n    }\n};\n\nvar advanceNextNonspace = function() {\n    this.offset = this.nextNonspace;\n    this.column = this.nextNonspaceColumn;\n    this.partiallyConsumedTab = false;\n};\n\nvar findNextNonspace = function() {\n    var currentLine = this.currentLine;\n    var i = this.offset;\n    var cols = this.column;\n    var c;\n\n    while ((c = currentLine.charAt(i)) !== \"\") {\n        if (c === \" \") {\n            i++;\n            cols++;\n        } else if (c === \"\\t\") {\n            i++;\n            cols += 4 - (cols % 4);\n        } else {\n            break;\n        }\n    }\n    this.blank = c === \"\\n\" || c === \"\\r\" || c === \"\";\n    this.nextNonspace = i;\n    this.nextNonspaceColumn = cols;\n    this.indent = this.nextNonspaceColumn - this.column;\n    this.indented = this.indent >= CODE_INDENT;\n};\n\n// Analyze a line of text and update the document appropriately.\n// We parse markdown text by calling this on each line of input,\n// then finalizing the document.\nvar incorporateLine = function(ln) {\n    var all_matched = true;\n    var t;\n\n    var container = this.doc;\n    this.oldtip = this.tip;\n    this.offset = 0;\n    this.column = 0;\n    this.blank = false;\n    this.partiallyConsumedTab = false;\n    this.lineNumber += 1;\n\n    // replace NUL characters for security\n    if (ln.indexOf(\"\\u0000\") !== -1) {\n        ln = ln.replace(/\\0/g, \"\\uFFFD\");\n    }\n\n    this.currentLine = ln;\n\n    // For each containing block, try to parse the associated line start.\n    // Bail out on failure: container will point to the last matching block.\n    // Set all_matched to false if not all containers match.\n    var lastChild;\n    while ((lastChild = container._lastChild) && lastChild._open) {\n        container = lastChild;\n\n        this.findNextNonspace();\n\n        switch (this.blocks[container.type].continue(this, container)) {\n            case 0: // we've matched, keep going\n                break;\n            case 1: // we've failed to match a block\n                all_matched = false;\n                break;\n            case 2: // we've hit end of line for fenced code close and can return\n                return;\n            default:\n                throw \"continue returned illegal value, must be 0, 1, or 2\";\n        }\n        if (!all_matched) {\n            container = container._parent; // back up to last matching block\n            break;\n        }\n    }\n\n    this.allClosed = container === this.oldtip;\n    this.lastMatchedContainer = container;\n\n    var matchedLeaf =\n        container.type !== \"paragraph\" && blocks[container.type].acceptsLines;\n    var starts = this.blockStarts;\n    var startsLen = starts.length;\n    // Unless last matched container is a code block, try new container starts,\n    // adding children to the last matched container:\n    while (!matchedLeaf) {\n        this.findNextNonspace();\n\n        // this is a little performance optimization:\n        if (\n            !this.indented &&\n            !reMaybeSpecial.test(ln.slice(this.nextNonspace))\n        ) {\n            this.advanceNextNonspace();\n            break;\n        }\n\n        var i = 0;\n        while (i < startsLen) {\n            var res = starts[i](this, container);\n            if (res === 1) {\n                container = this.tip;\n                break;\n            } else if (res === 2) {\n                container = this.tip;\n                matchedLeaf = true;\n                break;\n            } else {\n                i++;\n            }\n        }\n\n        if (i === startsLen) {\n            // nothing matched\n            this.advanceNextNonspace();\n            break;\n        }\n    }\n\n    // What remains at the offset is a text line.  Add the text to the\n    // appropriate container.\n\n    // First check for a lazy paragraph continuation:\n    if (!this.allClosed && !this.blank && this.tip.type === \"paragraph\") {\n        // lazy paragraph continuation\n        this.addLine();\n    } else {\n        // not a lazy continuation\n\n        // finalize any blocks not matched\n        this.closeUnmatchedBlocks();\n        if (this.blank && container.lastChild) {\n            container.lastChild._lastLineBlank = true;\n        }\n\n        t = container.type;\n\n        // Block quote lines are never blank as they start with >\n        // and we don't count blanks in fenced code for purposes of tight/loose\n        // lists or breaking out of lists.  We also don't set _lastLineBlank\n        // on an empty list item, or if we just closed a fenced block.\n        var lastLineBlank =\n            this.blank &&\n            !(\n                t === \"block_quote\" ||\n                (t === \"code_block\" && container._isFenced) ||\n                (t === \"item\" &&\n                    !container._firstChild &&\n                    container.sourcepos[0][0] === this.lineNumber)\n            );\n\n        // propagate lastLineBlank up through parents:\n        var cont = container;\n        while (cont) {\n            cont._lastLineBlank = lastLineBlank;\n            cont = cont._parent;\n        }\n\n        if (this.blocks[t].acceptsLines) {\n            this.addLine();\n            // if HtmlBlock, check for end condition\n            if (\n                t === \"html_block\" &&\n                container._htmlBlockType >= 1 &&\n                container._htmlBlockType <= 5 &&\n                reHtmlBlockClose[container._htmlBlockType].test(\n                    this.currentLine.slice(this.offset)\n                )\n            ) {\n                this.lastLineLength = ln.length;\n                this.finalize(container, this.lineNumber);\n            }\n        } else if (this.offset < ln.length && !this.blank) {\n            // create paragraph container for line\n            container = this.addChild(\"paragraph\", this.offset);\n            this.advanceNextNonspace();\n            this.addLine();\n        }\n    }\n    this.lastLineLength = ln.length;\n};\n\n// Finalize a block.  Close it and do any necessary postprocessing,\n// e.g. creating string_content from strings, setting the 'tight'\n// or 'loose' status of a list, and parsing the beginnings\n// of paragraphs for reference definitions.  Reset the tip to the\n// parent of the closed block.\nvar finalize = function(block, lineNumber) {\n    var above = block._parent;\n    block._open = false;\n    block.sourcepos[1] = [lineNumber, this.lastLineLength];\n\n    this.blocks[block.type].finalize(this, block);\n\n    this.tip = above;\n};\n\n// Walk through a block & children recursively, parsing string content\n// into inline content where appropriate.\nvar processInlines = function(block) {\n    var node, event, t;\n    var walker = block.walker();\n    this.inlineParser.refmap = this.refmap;\n    this.inlineParser.options = this.options;\n    while ((event = walker.next())) {\n        node = event.node;\n        t = node.type;\n        if (!event.entering && (t === \"paragraph\" || t === \"heading\")) {\n            this.inlineParser.parse(node);\n        }\n    }\n};\n\nvar Document = function() {\n    var doc = new Node(\"document\", [\n        [1, 1],\n        [0, 0]\n    ]);\n    return doc;\n};\n\n// The main parsing function.  Returns a parsed document AST.\nvar parse = function(input) {\n    this.doc = new Document();\n    this.tip = this.doc;\n    this.refmap = {};\n    this.lineNumber = 0;\n    this.lastLineLength = 0;\n    this.offset = 0;\n    this.column = 0;\n    this.lastMatchedContainer = this.doc;\n    this.currentLine = \"\";\n    if (this.options.time) {\n        console.time(\"preparing input\");\n    }\n    var lines = input.split(reLineEnding);\n    var len = lines.length;\n    if (input.charCodeAt(input.length - 1) === C_NEWLINE) {\n        // ignore last blank line created by final newline\n        len -= 1;\n    }\n    if (this.options.time) {\n        console.timeEnd(\"preparing input\");\n    }\n    if (this.options.time) {\n        console.time(\"block parsing\");\n    }\n    for (var i = 0; i < len; i++) {\n        this.incorporateLine(lines[i]);\n    }\n    while (this.tip) {\n        this.finalize(this.tip, len);\n    }\n    if (this.options.time) {\n        console.timeEnd(\"block parsing\");\n    }\n    if (this.options.time) {\n        console.time(\"inline parsing\");\n    }\n    this.processInlines(this.doc);\n    if (this.options.time) {\n        console.timeEnd(\"inline parsing\");\n    }\n    return this.doc;\n};\n\n// The Parser object.\nfunction Parser(options) {\n    return {\n        doc: new Document(),\n        blocks: blocks,\n        blockStarts: blockStarts,\n        tip: this.doc,\n        oldtip: this.doc,\n        currentLine: \"\",\n        lineNumber: 0,\n        offset: 0,\n        column: 0,\n        nextNonspace: 0,\n        nextNonspaceColumn: 0,\n        indent: 0,\n        indented: false,\n        blank: false,\n        partiallyConsumedTab: false,\n        allClosed: true,\n        lastMatchedContainer: this.doc,\n        refmap: {},\n        lastLineLength: 0,\n        inlineParser: new InlineParser(options),\n        findNextNonspace: findNextNonspace,\n        advanceOffset: advanceOffset,\n        advanceNextNonspace: advanceNextNonspace,\n        addLine: addLine,\n        addChild: addChild,\n        incorporateLine: incorporateLine,\n        finalize: finalize,\n        processInlines: processInlines,\n        closeUnmatchedBlocks: closeUnmatchedBlocks,\n        parse: parse,\n        options: options || {}\n    };\n}\n\nexport default Parser;\n","\"use strict\";\n\nfunction Renderer() {}\n\n/**\n *  Walks the AST and calls member methods for each Node type.\n *\n *  @param ast {Node} The root of the abstract syntax tree.\n */\nfunction render(ast) {\n    var walker = ast.walker(),\n        event,\n        type;\n\n    this.buffer = \"\";\n    this.lastOut = \"\\n\";\n\n    while ((event = walker.next())) {\n        type = event.node.type;\n        if (this[type]) {\n            this[type](event.node, event.entering);\n        }\n    }\n    return this.buffer;\n}\n\n/**\n *  Concatenate a literal string to the buffer.\n *\n *  @param str {String} The string to concatenate.\n */\nfunction lit(str) {\n    this.buffer += str;\n    this.lastOut = str;\n}\n\n/**\n *  Output a newline to the buffer.\n */\nfunction cr() {\n    if (this.lastOut !== \"\\n\") {\n        this.lit(\"\\n\");\n    }\n}\n\n/**\n *  Concatenate a string to the buffer possibly escaping the content.\n *\n *  Concrete renderer implementations should override this method.\n *\n *  @param str {String} The string to concatenate.\n */\nfunction out(str) {\n    this.lit(str);\n}\n\n/**\n *  Escape a string for the target renderer.\n *\n *  Abstract function that should be implemented by concrete\n *  renderer implementations.\n *\n *  @param str {String} The string to escape.\n */\nfunction esc(str) {\n    return str;\n}\n\nRenderer.prototype.render = render;\nRenderer.prototype.out = out;\nRenderer.prototype.lit = lit;\nRenderer.prototype.cr = cr;\nRenderer.prototype.esc = esc;\n\nexport default Renderer;\n","\"use strict\";\n\nimport { escapeXml } from \"../common.js\";\nimport Renderer from \"./renderer.js\";\n\nvar reUnsafeProtocol = /^javascript:|vbscript:|file:|data:/i;\nvar reSafeDataProtocol = /^data:image\\/(?:png|gif|jpeg|webp)/i;\n\nvar potentiallyUnsafe = function(url) {\n    return reUnsafeProtocol.test(url) && !reSafeDataProtocol.test(url);\n};\n\n// Helper function to produce an HTML tag.\nfunction tag(name, attrs, selfclosing) {\n    if (this.disableTags > 0) {\n        return;\n    }\n    this.buffer += \"<\" + name;\n    if (attrs && attrs.length > 0) {\n        var i = 0;\n        var attrib;\n        while ((attrib = attrs[i]) !== undefined) {\n            this.buffer += \" \" + attrib[0] + '=\"' + attrib[1] + '\"';\n            i++;\n        }\n    }\n    if (selfclosing) {\n        this.buffer += \" /\";\n    }\n    this.buffer += \">\";\n    this.lastOut = \">\";\n}\n\nfunction HtmlRenderer(options) {\n    options = options || {};\n    // by default, soft breaks are rendered as newlines in HTML\n    options.softbreak = options.softbreak || \"\\n\";\n    // set to \"<br />\" to make them hard breaks\n    // set to \" \" if you want to ignore line wrapping in source\n\n    this.disableTags = 0;\n    this.lastOut = \"\\n\";\n    this.options = options;\n}\n\n/* Node methods */\n\nfunction text(node) {\n    this.out(node.literal);\n}\n\nfunction softbreak() {\n    this.lit(this.options.softbreak);\n}\n\nfunction linebreak() {\n    this.tag(\"br\", [], true);\n    this.cr();\n}\n\nfunction link(node, entering) {\n    var attrs = this.attrs(node);\n    if (entering) {\n        if (!(this.options.safe && potentiallyUnsafe(node.destination))) {\n            attrs.push([\"href\", this.esc(node.destination)]);\n        }\n        if (node.title) {\n            attrs.push([\"title\", this.esc(node.title)]);\n        }\n        this.tag(\"a\", attrs);\n    } else {\n        this.tag(\"/a\");\n    }\n}\n\nfunction image(node, entering) {\n    if (entering) {\n        if (this.disableTags === 0) {\n            if (this.options.safe && potentiallyUnsafe(node.destination)) {\n                this.lit('<img src=\"\" alt=\"');\n            } else {\n                this.lit('<img src=\"' + this.esc(node.destination) + '\" alt=\"');\n            }\n        }\n        this.disableTags += 1;\n    } else {\n        this.disableTags -= 1;\n        if (this.disableTags === 0) {\n            if (node.title) {\n                this.lit('\" title=\"' + this.esc(node.title));\n            }\n            this.lit('\" />');\n        }\n    }\n}\n\nfunction emph(node, entering) {\n    this.tag(entering ? \"em\" : \"/em\");\n}\n\nfunction strong(node, entering) {\n    this.tag(entering ? \"strong\" : \"/strong\");\n}\n\nfunction paragraph(node, entering) {\n    var grandparent = node.parent.parent,\n        attrs = this.attrs(node);\n    if (grandparent !== null && grandparent.type === \"list\") {\n        if (grandparent.listTight) {\n            return;\n        }\n    }\n    if (entering) {\n        this.cr();\n        this.tag(\"p\", attrs);\n    } else {\n        this.tag(\"/p\");\n        this.cr();\n    }\n}\n\nfunction heading(node, entering) {\n    var tagname = \"h\" + node.level,\n        attrs = this.attrs(node);\n    if (entering) {\n        this.cr();\n        this.tag(tagname, attrs);\n    } else {\n        this.tag(\"/\" + tagname);\n        this.cr();\n    }\n}\n\nfunction code(node) {\n    this.tag(\"code\");\n    this.out(node.literal);\n    this.tag(\"/code\");\n}\n\nfunction code_block(node) {\n    var info_words = node.info ? node.info.split(/\\s+/) : [],\n        attrs = this.attrs(node);\n    if (info_words.length > 0 && info_words[0].length > 0) {\n        attrs.push([\"class\", \"language-\" + this.esc(info_words[0])]);\n    }\n    this.cr();\n    this.tag(\"pre\");\n    this.tag(\"code\", attrs);\n    this.out(node.literal);\n    this.tag(\"/code\");\n    this.tag(\"/pre\");\n    this.cr();\n}\n\nfunction thematic_break(node) {\n    var attrs = this.attrs(node);\n    this.cr();\n    this.tag(\"hr\", attrs, true);\n    this.cr();\n}\n\nfunction block_quote(node, entering) {\n    var attrs = this.attrs(node);\n    if (entering) {\n        this.cr();\n        this.tag(\"blockquote\", attrs);\n        this.cr();\n    } else {\n        this.cr();\n        this.tag(\"/blockquote\");\n        this.cr();\n    }\n}\n\nfunction list(node, entering) {\n    var tagname = node.listType === \"bullet\" ? \"ul\" : \"ol\",\n        attrs = this.attrs(node);\n\n    if (entering) {\n        var start = node.listStart;\n        if (start !== null && start !== 1) {\n            attrs.push([\"start\", start.toString()]);\n        }\n        this.cr();\n        this.tag(tagname, attrs);\n        this.cr();\n    } else {\n        this.cr();\n        this.tag(\"/\" + tagname);\n        this.cr();\n    }\n}\n\nfunction item(node, entering) {\n    var attrs = this.attrs(node);\n    if (entering) {\n        this.tag(\"li\", attrs);\n    } else {\n        this.tag(\"/li\");\n        this.cr();\n    }\n}\n\nfunction html_inline(node) {\n    if (this.options.safe) {\n        this.lit(\"<!-- raw HTML omitted -->\");\n    } else {\n        this.lit(node.literal);\n    }\n}\n\nfunction html_block(node) {\n    this.cr();\n    if (this.options.safe) {\n        this.lit(\"<!-- raw HTML omitted -->\");\n    } else {\n        this.lit(node.literal);\n    }\n    this.cr();\n}\n\nfunction custom_inline(node, entering) {\n    if (entering && node.onEnter) {\n        this.lit(node.onEnter);\n    } else if (!entering && node.onExit) {\n        this.lit(node.onExit);\n    }\n}\n\nfunction custom_block(node, entering) {\n    this.cr();\n    if (entering && node.onEnter) {\n        this.lit(node.onEnter);\n    } else if (!entering && node.onExit) {\n        this.lit(node.onExit);\n    }\n    this.cr();\n}\n\n/* Helper methods */\n\nfunction out(s) {\n    this.lit(this.esc(s));\n}\n\nfunction attrs(node) {\n    var att = [];\n    if (this.options.sourcepos) {\n        var pos = node.sourcepos;\n        if (pos) {\n            att.push([\n                \"data-sourcepos\",\n                String(pos[0][0]) +\n                    \":\" +\n                    String(pos[0][1]) +\n                    \"-\" +\n                    String(pos[1][0]) +\n                    \":\" +\n                    String(pos[1][1])\n            ]);\n        }\n    }\n    return att;\n}\n\n// quick browser-compatible inheritance\nHtmlRenderer.prototype = Object.create(Renderer.prototype);\n\nHtmlRenderer.prototype.text = text;\nHtmlRenderer.prototype.html_inline = html_inline;\nHtmlRenderer.prototype.html_block = html_block;\nHtmlRenderer.prototype.softbreak = softbreak;\nHtmlRenderer.prototype.linebreak = linebreak;\nHtmlRenderer.prototype.link = link;\nHtmlRenderer.prototype.image = image;\nHtmlRenderer.prototype.emph = emph;\nHtmlRenderer.prototype.strong = strong;\nHtmlRenderer.prototype.paragraph = paragraph;\nHtmlRenderer.prototype.heading = heading;\nHtmlRenderer.prototype.code = code;\nHtmlRenderer.prototype.code_block = code_block;\nHtmlRenderer.prototype.thematic_break = thematic_break;\nHtmlRenderer.prototype.block_quote = block_quote;\nHtmlRenderer.prototype.list = list;\nHtmlRenderer.prototype.item = item;\nHtmlRenderer.prototype.custom_inline = custom_inline;\nHtmlRenderer.prototype.custom_block = custom_block;\n\nHtmlRenderer.prototype.esc = escapeXml;\n\nHtmlRenderer.prototype.out = out;\nHtmlRenderer.prototype.tag = tag;\nHtmlRenderer.prototype.attrs = attrs;\n\nexport default HtmlRenderer;\n","\"use strict\";\n\nimport Renderer from \"./renderer.js\";\nimport { escapeXml } from \"../common.js\";\n\nvar reXMLTag = /\\<[^>]*\\>/;\n\nfunction toTagName(s) {\n    return s.replace(/([a-z])([A-Z])/g, \"$1_$2\").toLowerCase();\n}\n\nfunction XmlRenderer(options) {\n    options = options || {};\n\n    this.disableTags = 0;\n    this.lastOut = \"\\n\";\n\n    this.indentLevel = 0;\n    this.indent = \"  \";\n\n    this.options = options;\n}\n\nfunction render(ast) {\n    this.buffer = \"\";\n\n    var attrs;\n    var tagname;\n    var walker = ast.walker();\n    var event, node, entering;\n    var container;\n    var selfClosing;\n    var nodetype;\n\n    var options = this.options;\n\n    if (options.time) {\n        console.time(\"rendering\");\n    }\n\n    this.buffer += '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n';\n    this.buffer += '<!DOCTYPE document SYSTEM \"CommonMark.dtd\">\\n';\n\n    while ((event = walker.next())) {\n        entering = event.entering;\n        node = event.node;\n        nodetype = node.type;\n\n        container = node.isContainer;\n\n        selfClosing =\n            nodetype === \"thematic_break\" ||\n            nodetype === \"linebreak\" ||\n            nodetype === \"softbreak\";\n\n        tagname = toTagName(nodetype);\n\n        if (entering) {\n            attrs = [];\n\n            switch (nodetype) {\n                case \"document\":\n                    attrs.push([\"xmlns\", \"http://commonmark.org/xml/1.0\"]);\n                    break;\n                case \"list\":\n                    if (node.listType !== null) {\n                        attrs.push([\"type\", node.listType.toLowerCase()]);\n                    }\n                    if (node.listStart !== null) {\n                        attrs.push([\"start\", String(node.listStart)]);\n                    }\n                    if (node.listTight !== null) {\n                        attrs.push([\n                            \"tight\",\n                            node.listTight ? \"true\" : \"false\"\n                        ]);\n                    }\n                    var delim = node.listDelimiter;\n                    if (delim !== null) {\n                        var delimword = \"\";\n                        if (delim === \".\") {\n                            delimword = \"period\";\n                        } else {\n                            delimword = \"paren\";\n                        }\n                        attrs.push([\"delimiter\", delimword]);\n                    }\n                    break;\n                case \"code_block\":\n                    if (node.info) {\n                        attrs.push([\"info\", node.info]);\n                    }\n                    break;\n                case \"heading\":\n                    attrs.push([\"level\", String(node.level)]);\n                    break;\n                case \"link\":\n                case \"image\":\n                    attrs.push([\"destination\", node.destination]);\n                    attrs.push([\"title\", node.title]);\n                    break;\n                case \"custom_inline\":\n                case \"custom_block\":\n                    attrs.push([\"on_enter\", node.onEnter]);\n                    attrs.push([\"on_exit\", node.onExit]);\n                    break;\n                default:\n                    break;\n            }\n            if (options.sourcepos) {\n                var pos = node.sourcepos;\n                if (pos) {\n                    attrs.push([\n                        \"sourcepos\",\n                        String(pos[0][0]) +\n                            \":\" +\n                            String(pos[0][1]) +\n                            \"-\" +\n                            String(pos[1][0]) +\n                            \":\" +\n                            String(pos[1][1])\n                    ]);\n                }\n            }\n\n            this.cr();\n            this.out(this.tag(tagname, attrs, selfClosing));\n            if (container) {\n                this.indentLevel += 1;\n            } else if (!container && !selfClosing) {\n                var lit = node.literal;\n                if (lit) {\n                    this.out(this.esc(lit));\n                }\n                this.out(this.tag(\"/\" + tagname));\n            }\n        } else {\n            this.indentLevel -= 1;\n            this.cr();\n            this.out(this.tag(\"/\" + tagname));\n        }\n    }\n    if (options.time) {\n        console.timeEnd(\"rendering\");\n    }\n    this.buffer += \"\\n\";\n    return this.buffer;\n}\n\nfunction out(s) {\n    if (this.disableTags > 0) {\n        this.buffer += s.replace(reXMLTag, \"\");\n    } else {\n        this.buffer += s;\n    }\n    this.lastOut = s;\n}\n\nfunction cr() {\n    if (this.lastOut !== \"\\n\") {\n        this.buffer += \"\\n\";\n        this.lastOut = \"\\n\";\n        for (var i = this.indentLevel; i > 0; i--) {\n            this.buffer += this.indent;\n        }\n    }\n}\n\n// Helper function to produce an XML tag.\nfunction tag(name, attrs, selfclosing) {\n    var result = \"<\" + name;\n    if (attrs && attrs.length > 0) {\n        var i = 0;\n        var attrib;\n        while ((attrib = attrs[i]) !== undefined) {\n            result += \" \" + attrib[0] + '=\"' + this.esc(attrib[1]) + '\"';\n            i++;\n        }\n    }\n    if (selfclosing) {\n        result += \" /\";\n    }\n    result += \">\";\n    return result;\n}\n\n// quick browser-compatible inheritance\nXmlRenderer.prototype = Object.create(Renderer.prototype);\n\nXmlRenderer.prototype.render = render;\nXmlRenderer.prototype.out = out;\nXmlRenderer.prototype.cr = cr;\nXmlRenderer.prototype.tag = tag;\nXmlRenderer.prototype.esc = escapeXml;\n\nexport default XmlRenderer;\n"],"names":["isContainer","node","_type","resumeAt","entering","this","current","next","cur","container","_firstChild","root","_next","_parent","NodeWalker","Node","nodeType","sourcepos","_lastChild","_prev","_sourcepos","_lastLineBlank","_lastLineChecked","_open","_string_content","_literal","_listData","_info","_destination","_title","_isFenced","_fenceChar","_fenceLength","_fenceOffset","_level","_onEnter","_onExit","proto","prototype","Object","defineProperty","get","set","s","type","t","tight","start","n","delimiter","delim","appendChild","child","unlink","prependChild","insertAfter","sibling","insertBefore","walker","encodeCache","encode","string","exclude","keepEscaped","i","l","code","nextCode","cache","result","defaultChars","ch","String","fromCharCode","test","push","toString","toUpperCase","slice","length","charCodeAt","getEncodeCache","encodeURIComponent","componentChars","$fca801bbc3ce454c5521ca26ef2f171$exports","$df9b7643534f8c8124c138da0c2c0f79$exports","value","decode","$df9b7643534f8c8124c138da0c2c0f79$export$decode","decodeStrict","$df9b7643534f8c8124c138da0c2c0f79$export$decodeStrict","$df9b7643534f8c8124c138da0c2c0f79$export$encode","__importDefault","$ee1cf05f19c7302be17bf6d38bdd6f51$exports","mod","__esModule","default","decodeXML","$ee1cf05f19c7302be17bf6d38bdd6f51$export$decodeXML","decodeHTMLStrict","$ee1cf05f19c7302be17bf6d38bdd6f51$export$decodeHTMLStrict","decodeHTML","$ee1cf05f19c7302be17bf6d38bdd6f51$export$decodeHTML","entities_json_1","$cc0e6a351f5c08374528e9f61218$exports","JSON","parse","legacy_json_1","xml_json_1","$f67cf6f68e6c4c17e214386bc0466b3a$exports","$f00896b93557ab26e2d6be3c92fc09c$exports","decode_json_1","codePoint","output","$f00896b93557ab26e2d6be3c92fc09c$export$default","decode_codepoint_1","getStrictDecoder","map","keys","join","replace","getReplacer","re","RegExp","str","sorter","a","b","charAt","secondChar","parseInt","substr","legacy","sort","j","replacer","$a834eda89a4b490628ea2c9a8494dcf0$exports","encodeXML","$a834eda89a4b490628ea2c9a8494dcf0$export$encodeXML","encodeHTML","$a834eda89a4b490628ea2c9a8494dcf0$export$encodeHTML","escape","$a834eda89a4b490628ea2c9a8494dcf0$export$escape","inverseXML","getInverseObj","getInverse","getInverseReplacer","inverseHTML","obj","reduce","inverse","name","single","multiple","_i","_a","k","end","count","splice","unshift","reNonASCII","singleCharReplacer","c","codePointAt","data","reXmlChars","level","enumerable","_fromCodePoint","repeat","reHtmlTag","reBackslashOrAmp","reEntityOrEscapedChar","reXmlSpecial","unescapeChar","unescapeString","replaceUnsafeChar","escapeXml","fromCodePoint","_","e","RangeError","stringFromCharCode","floor","Math","highSurrogate","lowSurrogate","MAX_SIZE","codeUnits","index","arguments","Number","isFinite","apply","object","$defineProperty","error","TypeError","Infinity","configurable","writable","normalizeURI","uri","$fca801bbc3ce454c5521ca26ef2f171$$interop$default","err","$e6b3ce5fb6b6068c8caa134c7fbfe419$export$unescapeString","$e6b3ce5fb6b6068c8caa134c7fbfe419$export$reHtmlTag","rePunctuation","reLinkTitle","reLinkDestinationBraces","reEscapable","reEntityHere","reTicks","reTicksHere","reEllipses","reDash","reEmailAutolink","reAutolink","reSpnl","reWhitespaceChar","reUnicodeWhitespaceChar","reFinalSpace","reInitialSpace","reSpaceAtEndOfLine","reLinkLabel","reMain","text","normalizeReference","trim","toLowerCase","match","m","exec","subject","pos","peek","spnl","parseBackticks","block","ticks","matched","contents","afterOpenTicks","parseBackslash","subj","parseAutolink","dest","parseHtmlTag","scanDelims","cc","char_before","char_after","cc_after","left_flanking","right_flanking","can_open","can_close","after_is_whitespace","after_is_punctuation","before_is_whitespace","before_is_punctuation","numdelims","startpos","$eb72f3ec07eaca019f3aee07fc4f6b$export$default","handleDelim","res","options","smart","delimiters","origdelims","previous","removeDelimiter","processEmphasis","stack_bottom","opener","closer","old_closer","opener_inl","closer_inl","tempstack","use_delims","tmp","opener_found","bottom","top","openers_bottom","odd_match","closercc","emph","literal","parseLinkTitle","title","parseLinkDestination","savepos","openparens","parseLinkLabel","parseOpenBracket","addBracket","parseBang","parseCloseBracket","is_image","reflabel","brackets","active","removeBracket","image","beforelabel","bracketAfter","link","refmap","destination","previousDelimiter","parseEntity","parseString","chars","enCount","emCount","parseNewline","lastc","hardbreak","parseReference","rawlabel","matchChars","beforetitle","atLineEnd","normlabel","parseInline","parseInlines","InlineParser","reHtmlBlockOpen","reHtmlBlockClose","reThematicBreak","reMaybeSpecial","reNonSpace","reBulletListMarker","reOrderedListMarker","reATXHeadingMarker","reCodeFence","reClosingCodeFence","reSetextHeadingLine","reLineEnding","isSpaceOrTab","ln","endsWithBlankLine","addLine","partiallyConsumedTab","offset","charsToTab","column","tip","currentLine","addChild","tag","blocks","canContain","finalize","lineNumber","column_number","newBlock","closeUnmatchedBlocks","allClosed","oldtip","lastMatchedContainer","parent","document","continue","acceptsLines","list","parser","item","subitem","block_quote","indented","nextNonspace","advanceNextNonspace","advanceOffset","blank","indent","markerOffset","padding","heading","thematic_break","code_block","lastLineLength","content","newlinePos","indexOf","firstLine","rest","info","html_block","_htmlBlockType","paragraph","hasReferenceDefs","inlineParser","blockStarts","fenceLength","blockType","list_data","item_data","nextc","spacesStartCol","spacesStartOffset","bulletChar","blank_item","spaces_after_marker","parseListMarker","columns","charsToAdvance","nextNonspaceColumn","findNextNonspace","cols","incorporateLine","lastChild","all_matched","doc","matchedLeaf","starts","startsLen","lastLineBlank","cont","above","processInlines","event","Document","input","time","console","lines","split","len","timeEnd","Renderer","$fcc52a750951d9b1ddc7d58a4d47b463$export$default","render","ast","buffer","lastOut","out","lit","cr","esc","reUnsafeProtocol","reSafeDataProtocol","potentiallyUnsafe","url","HtmlRenderer","softbreak","disableTags","create","html_inline","safe","linebreak","attrs","strong","grandparent","listTight","tagname","info_words","listType","listStart","custom_inline","onEnter","onExit","custom_block","$e6b3ce5fb6b6068c8caa134c7fbfe419$export$escapeXml","selfclosing","attrib","undefined","att","reXMLTag","XmlRenderer","indentLevel","selfClosing","nodetype","listDelimiter","delimword"],"version":3,"file":"commonmark.49fe3127.js.map"}